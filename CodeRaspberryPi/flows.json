[
    {
        "id": "7aa2c0dcb1ad3f61",
        "type": "tab",
        "label": "Individual Device",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bd2114e151abaf4a",
        "type": "tab",
        "label": "Data View",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9998c34701ab1705",
        "type": "tab",
        "label": "Setting",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5f30997072251ca7",
        "type": "tab",
        "label": "About Us",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4a7e7418964c9f43",
        "type": "tab",
        "label": "Flow 1",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "80131e16e49f1aed",
        "type": "group",
        "z": "5f30997072251ca7",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e2aa3c47f343ad52",
            "29749f95fdbd5706",
            "0c4099c440f8cf33",
            "1ba3ccfb0c01a408",
            "49ee9ea6b8c69d0d",
            "27336f972bbac707",
            "5267c52d57329083",
            "9948881a7644848d",
            "67937dc1db4f1ea6",
            "414c1534546247f7"
        ],
        "x": 34,
        "y": 19,
        "w": 912,
        "h": 202
    },
    {
        "id": "608a83b8a8dc43e9",
        "type": "group",
        "z": "5f30997072251ca7",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "55554125af38d38e",
            "9a239a856f8cc5d8",
            "75b71cf39204f828",
            "095869417e3e6c54",
            "f7a0a96acd45c631",
            "f8a6dd71743dacd9",
            "2096d9a25cc5d96f",
            "8b96169a7b65b964",
            "61788a2fb851f212",
            "f373c398b49c1c99"
        ],
        "x": 974,
        "y": 19,
        "w": 912,
        "h": 202
    },
    {
        "id": "c7b94306abd0ae1c",
        "type": "group",
        "z": "5f30997072251ca7",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "c486f39425a6b43d",
            "e771e1fe2454ea0e",
            "069fb13e997a3679",
            "6eec5bb87103e82d",
            "c469422b0c182879",
            "a66fcab8fd3732a7",
            "e357683968c612b2",
            "f0471ba0ad9c3599",
            "7a213ed9ed45a1ee",
            "cb3dcbaffa31b88f"
        ],
        "x": 974,
        "y": 239,
        "w": 912,
        "h": 202
    },
    {
        "id": "c92d375765b1b97a",
        "type": "group",
        "z": "5f30997072251ca7",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "5c8ad4988ab8e117",
            "e40126db54187333",
            "1d895848229cc7c3",
            "93491331a1b1a18b",
            "71483044774b3661",
            "2e2a67759b360eb0",
            "7c99b4dd180586b4",
            "b64788d3b68dea85",
            "99b07dc219c0bed8",
            "7bebd35aa9cba926"
        ],
        "x": 34,
        "y": 239,
        "w": 912,
        "h": 202
    },
    {
        "id": "d930bf6892522eb6",
        "type": "group",
        "z": "5f30997072251ca7",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "8a4616e6abd82c59",
            "80cb4087d8132f9e",
            "cd70302654556716",
            "5f9a9917a569378f",
            "27368e7a35c7c5a2",
            "8a5f74ecd9c673c6",
            "d8a6ef56fc1a4c33",
            "78698af26b103ce4",
            "4253069dd5ed4517",
            "fdc357afbd1f52c6"
        ],
        "x": 34,
        "y": 459,
        "w": 912,
        "h": 202
    },
    {
        "id": "09e3555552eb52bf",
        "type": "group",
        "z": "5f30997072251ca7",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "08bf7ea7a6e889cb",
            "ad86a873f6e1fc3e",
            "29a83d5d7dd9df48",
            "2c04bc8671633c86",
            "29aa7fe2f1db6a02",
            "db96b5b5b5fd7c6d",
            "b944970daddb04f7",
            "a94ae301ac39db3d",
            "8a82391651e02754",
            "8c6cbb5dd9faa7ae"
        ],
        "x": 974,
        "y": 459,
        "w": 912,
        "h": 202
    },
    {
        "id": "61bb2e573a3113a1",
        "type": "group",
        "z": "7aa2c0dcb1ad3f61",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e90d47681c175887",
            "3b96ef2f511f464b",
            "e235a199fbf8e459",
            "37d1fa1deba6269d",
            "d677cf79bca21614",
            "9f90169dd523548d",
            "a4a6a9ecbc119e0e",
            "42fec20746cc78e0",
            "75a4f22317d61143",
            "a69c99f6840b1177",
            "32e9264d8a223708",
            "d920536810b649a7",
            "9ad9d2c32993a0c8",
            "7b2ba296e3f5e3a5",
            "0704b819066de953",
            "6ac28cb84fee6f2c",
            "691b5f161cc40ede",
            "b1e814136c92328a",
            "a2a3e8a18c31da8e",
            "f360311e4aefb8b7",
            "48e68d59fbcb481d",
            "1d60d719a4118c0c",
            "cff9848bcee3c960"
        ],
        "x": 34,
        "y": 19,
        "w": 1532,
        "h": 402
    },
    {
        "id": "1658d0c3327d9add",
        "type": "group",
        "z": "7aa2c0dcb1ad3f61",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "fb9f844027d67c51",
            "6937aebbe287040f",
            "09cb73efc427dfcf",
            "613aed9060f32902",
            "5baebb76d8f8d196",
            "5e542be6f319b1be",
            "4b3e83c04b0bac1d",
            "a24215da35a5f476",
            "822955d49cb6871c",
            "40672adb337c5b31",
            "ca5d40bb65acc1a6",
            "970f5ecce38e1e71",
            "c719ce16f36be8b0",
            "7195fa562d9e2810",
            "13da39595b1e4c53",
            "85e21daeecab9bc3",
            "ed8dfa9454b4a998",
            "ef8c4ead4d1832cd",
            "1bc78b5c0b2f08da",
            "8f355250d0e42988",
            "6ee16ec8753f0d32"
        ],
        "x": 1594,
        "y": 19,
        "w": 1512,
        "h": 362
    },
    {
        "id": "38c16815898d4182",
        "type": "group",
        "z": "7aa2c0dcb1ad3f61",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d7d916558096ce06",
            "dcc967c2c16f2085",
            "6ffe13df81e818a6",
            "1bb65fc1ec112cfa",
            "e0e4a976cae22e3f",
            "5154052f81b895c4",
            "1212df10a202bcfa",
            "e5cf85b259e12f00",
            "d84bba80c5e5a3d8",
            "eb48ed3e45171951",
            "f583e8fe2a2d560c",
            "ea89ba92896414ca",
            "cc105a293e642050",
            "c67b5946a507bcaf",
            "843ada25e05d633e",
            "7418fabfd291093f",
            "7f96a1c8749a3c29",
            "bee626716f66087c",
            "b38d5d95a94a4fde",
            "93077bb1625402b5",
            "bfe47362aec822cc"
        ],
        "x": 1594,
        "y": 459,
        "w": 1512,
        "h": 362
    },
    {
        "id": "032d0c29b8257962",
        "type": "group",
        "z": "7aa2c0dcb1ad3f61",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "cc3f182d6f603828",
            "42f882c5d8a13b88",
            "3d80d76bb5295337",
            "e2bb901a46d20922",
            "9bad8f9541ad0b03",
            "a5b13d6929ddb996",
            "fbd85d16497e7961",
            "548f00c1ab0fee7a",
            "49dbad6fe441ab7d",
            "beca1b69e307c7c5",
            "bfd172813112d6b5",
            "076b2ee2670c670f",
            "d2f882732b98008d",
            "79688de27624ef92",
            "e323a0783f1660fd",
            "d73a96baf6447692",
            "4166e90ca4045632",
            "ab4cc799d75bb804",
            "fd4a3c763ef1095e",
            "4cf50752ba267cd9",
            "69a9adccd24bb214"
        ],
        "x": 34,
        "y": 459,
        "w": 1512,
        "h": 362
    },
    {
        "id": "6359e7e814b343c2",
        "type": "group",
        "z": "7aa2c0dcb1ad3f61",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "771b1c5b4018da09",
            "c4f4c6a2776d5228",
            "11a518cac1d718f0",
            "5d191b4d7d4c69a5",
            "c4c8aa854e28dcc1",
            "79fa68516b0f4d27",
            "c1b17963dc7f9d14",
            "bcdfed982f75b17c",
            "83a3fe66b75eada1",
            "249f9cc13143413e",
            "1f188621b8cc7d39",
            "47b887e9b634eefc",
            "c4d54c6ad5a939c0",
            "9c7a48c6264fc72e",
            "75e9fc6128df392a",
            "ea9c05d71dc1dc5f",
            "67a3af7ef4737883",
            "2bd7c6aff056c9d9",
            "0dbcf31b082748b0",
            "13874d18fbd62647",
            "1555e14053ce93f2"
        ],
        "x": 34,
        "y": 859,
        "w": 1512,
        "h": 362
    },
    {
        "id": "2c8518a9d41911a9",
        "type": "group",
        "z": "7aa2c0dcb1ad3f61",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "7496d6feb6223acb",
            "638301bdfba880ba",
            "42efe51e361f0684",
            "00d1ae949defb27c",
            "6f9f58be4cbf2a79",
            "2ab54647a38e4a58",
            "a39f4374fa01ef43",
            "19ac63afcc430990",
            "f50a0fc8d3d9b6a7",
            "6128c42a915b539c",
            "e74a1ea6bf59de8d",
            "20993bb1898a9726",
            "ce65fe31d89fbbee",
            "6c4f820e82a99933",
            "176bbc67a14e60b0",
            "83ae0fbf0a24d5ca",
            "53bdcef18e936c77",
            "ea9bf853e99ed3af",
            "e74de0ac8b9d27ab",
            "ed263269109609f6",
            "b3614cd518679cce"
        ],
        "x": 1594,
        "y": 859,
        "w": 1532,
        "h": 362
    },
    {
        "id": "f433c8ea4f8ad10c",
        "type": "ui_tab",
        "name": "Home",
        "icon": "info",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "b293244078660d36",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "true",
            "allowSwipe": "false",
            "lockMenu": "icon",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "5dd942a404d91831",
        "type": "serial-port",
        "name": "",
        "serialport": "/dev/ttySOFT0",
        "serialbaud": "1200",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "}",
        "bin": "false",
        "out": "char",
        "addchar": "\\n",
        "responsetimeout": "10000"
    },
    {
        "id": "cc130bcc21f0f3e2",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "80c4aa0848f56bc1",
        "order": 1,
        "disp": false,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "14c3f49060a35744",
        "type": "serial-port",
        "name": "",
        "serialport": "/dev/ttyAMA0",
        "serialbaud": "1200",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "}",
        "bin": "false",
        "out": "char",
        "addchar": "\\n",
        "responsetimeout": "10000"
    },
    {
        "id": "80c4aa0848f56bc1",
        "type": "ui_tab",
        "name": "Device 1",
        "icon": "looks_one",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "532b4ac6103dcd1a",
        "type": "ui_tab",
        "name": "Device 2",
        "icon": "looks_two",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "803f6a71a566de9b",
        "type": "ui_tab",
        "name": "Device 3",
        "icon": "looks_3",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "5064f2b868aab11d",
        "type": "ui_tab",
        "name": "Device 4",
        "icon": "looks_4",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "a7d74fccdc31bee6",
        "type": "ui_tab",
        "name": "Device 5",
        "icon": "looks_5",
        "order": 6,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "636bf706a0086361",
        "type": "ui_tab",
        "name": "Device 6",
        "icon": "looks_6",
        "order": 7,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "9720ee367f97644d",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "532b4ac6103dcd1a",
        "order": 1,
        "disp": false,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d39f66a71d76a628",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "803f6a71a566de9b",
        "order": 1,
        "disp": false,
        "width": 12,
        "collapse": false,
        "className": ""
    },
    {
        "id": "c5c4dbf6ce5cea9f",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "5064f2b868aab11d",
        "order": 1,
        "disp": false,
        "width": 12,
        "collapse": false,
        "className": ""
    },
    {
        "id": "3414d0e8ac778b41",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "a7d74fccdc31bee6",
        "order": 1,
        "disp": false,
        "width": 12,
        "collapse": false,
        "className": ""
    },
    {
        "id": "40cb7dafebe28b1d",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "636bf706a0086361",
        "order": 1,
        "disp": false,
        "width": 12,
        "collapse": false,
        "className": ""
    },
    {
        "id": "cd30b0866923dca9",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "f433c8ea4f8ad10c",
        "order": 2,
        "disp": false,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "27c2d5aa23760785",
        "type": "ui_group",
        "name": "Group 2",
        "tab": "f433c8ea4f8ad10c",
        "order": 3,
        "disp": false,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "a6415ec6b702cf97",
        "type": "ui_group",
        "name": "Group 3",
        "tab": "f433c8ea4f8ad10c",
        "order": 4,
        "disp": false,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "80b477da258d817c",
        "type": "ui_group",
        "name": "Group 4",
        "tab": "f433c8ea4f8ad10c",
        "order": 5,
        "disp": false,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d25661d6683a2457",
        "type": "ui_group",
        "name": "Group 5",
        "tab": "f433c8ea4f8ad10c",
        "order": 6,
        "disp": false,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d6abc38f0c3236c2",
        "type": "ui_group",
        "name": "Group 6",
        "tab": "f433c8ea4f8ad10c",
        "order": 7,
        "disp": false,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c08ba3c92d081914",
        "type": "serial-port",
        "name": "",
        "serialport": "/dev/ttyAMA2",
        "serialbaud": "1200",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "}",
        "bin": "false",
        "out": "char",
        "addchar": "\\n",
        "responsetimeout": "10000"
    },
    {
        "id": "841e40e2941620a6",
        "type": "serial-port",
        "name": "",
        "serialport": "/dev/ttyAMA3",
        "serialbaud": "1200",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "}",
        "bin": "false",
        "out": "char",
        "addchar": "\\n",
        "responsetimeout": "10000"
    },
    {
        "id": "afcc5b962a35d645",
        "type": "serial-port",
        "name": "",
        "serialport": "/dev/ttyAMA4",
        "serialbaud": "1200",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "}",
        "bin": "false",
        "out": "char",
        "addchar": "\\n",
        "responsetimeout": "10000"
    },
    {
        "id": "e1dc8e9e1b2641b8",
        "type": "serial-port",
        "name": "",
        "serialport": "/dev/ttyAMA5",
        "serialbaud": "1200",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "}",
        "bin": "false",
        "out": "char",
        "addchar": "\\n",
        "responsetimeout": "10000"
    },
    {
        "id": "45be54dbf5292aab",
        "type": "ui_tab",
        "name": "Data",
        "icon": "insert_drive_file",
        "order": 8,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "51e8082386a8a87a",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "45be54dbf5292aab",
        "order": 1,
        "disp": false,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "8ef658be87907aa8",
        "type": "ui_group",
        "name": "Default",
        "tab": "f433c8ea4f8ad10c",
        "order": 1,
        "disp": false,
        "width": 13,
        "collapse": false,
        "className": ""
    },
    {
        "id": "8be12bad050f9580",
        "type": "ui_tab",
        "name": "Setting",
        "icon": "settings",
        "order": 9,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "83c5bb46763085ab",
        "type": "ui_group",
        "name": "Default",
        "tab": "8be12bad050f9580",
        "order": 1,
        "disp": false,
        "width": 13,
        "collapse": false,
        "className": ""
    },
    {
        "id": "614fce39359f50f5",
        "type": "ui_group",
        "name": "Form1",
        "tab": "8be12bad050f9580",
        "order": 2,
        "disp": false,
        "width": "13",
        "collapse": false,
        "className": ""
    },
    {
        "id": "12c7c5a9.cc3c3a",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard"
    },
    {
        "id": "85f3d715e90bba60",
        "type": "ui_tab",
        "name": "Tab Test",
        "icon": "dashboard",
        "order": 11,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "4bc2cfe0d22ec098",
        "type": "ui_group",
        "name": "Form2",
        "tab": "8be12bad050f9580",
        "order": 3,
        "disp": false,
        "width": "13",
        "collapse": false,
        "className": ""
    },
    {
        "id": "3c4edc4f79a8be8e",
        "type": "ui_group",
        "name": "Form3",
        "tab": "8be12bad050f9580",
        "order": 4,
        "disp": false,
        "width": "13",
        "collapse": false,
        "className": ""
    },
    {
        "id": "16edb06c87718e1a",
        "type": "ui_group",
        "name": "Form4",
        "tab": "8be12bad050f9580",
        "order": 5,
        "disp": false,
        "width": "13",
        "collapse": false,
        "className": ""
    },
    {
        "id": "1582a2ec72c48d7b",
        "type": "ui_group",
        "name": "SettingView",
        "tab": "8be12bad050f9580",
        "order": 6,
        "disp": false,
        "width": "13",
        "collapse": false,
        "className": ""
    },
    {
        "id": "33e3c40b637af648",
        "type": "ui_spacer",
        "z": "9998c34701ab1705",
        "name": "spacer",
        "group": "83c5bb46763085ab",
        "order": 3,
        "width": 2,
        "height": 1
    },
    {
        "id": "6a029c3bd181565a",
        "type": "ui_spacer",
        "z": "bd2114e151abaf4a",
        "name": "spacer",
        "group": "51e8082386a8a87a",
        "order": 3,
        "width": 1,
        "height": 1
    },
    {
        "id": "df0c00cda344227a",
        "type": "ui_spacer",
        "z": "bd2114e151abaf4a",
        "name": "spacer",
        "group": "51e8082386a8a87a",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "ad19c7160873fa53",
        "type": "ui_spacer",
        "z": "bd2114e151abaf4a",
        "name": "spacer",
        "group": "51e8082386a8a87a",
        "order": 8,
        "width": 1,
        "height": 1
    },
    {
        "id": "e7dd64aee6b1d131",
        "type": "ui_spacer",
        "z": "bd2114e151abaf4a",
        "name": "spacer",
        "group": "51e8082386a8a87a",
        "order": 10,
        "width": 1,
        "height": 1
    },
    {
        "id": "f4c91f7538070494",
        "type": "ui_spacer",
        "z": "bd2114e151abaf4a",
        "name": "spacer",
        "group": "51e8082386a8a87a",
        "order": 12,
        "width": 1,
        "height": 1
    },
    {
        "id": "d1706ab8f6f0a272",
        "type": "ui_spacer",
        "z": "bd2114e151abaf4a",
        "name": "spacer",
        "group": "51e8082386a8a87a",
        "order": 14,
        "width": 1,
        "height": 1
    },
    {
        "id": "0201e2cf7958b6ec",
        "type": "ui_spacer",
        "z": "bd2114e151abaf4a",
        "name": "spacer",
        "group": "51e8082386a8a87a",
        "order": 15,
        "width": 3,
        "height": 1
    },
    {
        "id": "e90d47681c175887",
        "type": "ui_text",
        "z": "7aa2c0dcb1ad3f61",
        "g": "61bb2e573a3113a1",
        "group": "cc130bcc21f0f3e2",
        "order": 1,
        "width": 5,
        "height": 1,
        "name": "",
        "label": "Device",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "25",
        "color": "#000000",
        "x": 790,
        "y": 60,
        "wires": []
    },
    {
        "id": "3b96ef2f511f464b",
        "type": "json",
        "z": "7aa2c0dcb1ad3f61",
        "g": "61bb2e573a3113a1",
        "name": "Json Parser",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 310,
        "y": 120,
        "wires": [
            [
                "d677cf79bca21614",
                "9f90169dd523548d",
                "a4a6a9ecbc119e0e",
                "a69c99f6840b1177",
                "6ac28cb84fee6f2c",
                "691b5f161cc40ede"
            ]
        ]
    },
    {
        "id": "e235a199fbf8e459",
        "type": "serial in",
        "z": "7aa2c0dcb1ad3f61",
        "g": "61bb2e573a3113a1",
        "name": "",
        "serial": "14c3f49060a35744",
        "x": 130,
        "y": 120,
        "wires": [
            [
                "3b96ef2f511f464b",
                "7b2ba296e3f5e3a5"
            ]
        ]
    },
    {
        "id": "37d1fa1deba6269d",
        "type": "ui_chart",
        "z": "7aa2c0dcb1ad3f61",
        "g": "61bb2e573a3113a1",
        "name": "",
        "group": "cc130bcc21f0f3e2",
        "order": 4,
        "width": 4,
        "height": 5,
        "label": "Temperature (°C)",
        "chartType": "line",
        "legend": "false",
        "xformat": "mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 830,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "d677cf79bca21614",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "61bb2e573a3113a1",
        "name": "Get_Temp_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.Temp;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 100,
        "wires": [
            [
                "37d1fa1deba6269d"
            ]
        ]
    },
    {
        "id": "9f90169dd523548d",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "61bb2e573a3113a1",
        "name": "Get_Humi_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.Humi;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 140,
        "wires": [
            [
                "42fec20746cc78e0"
            ]
        ]
    },
    {
        "id": "a4a6a9ecbc119e0e",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "61bb2e573a3113a1",
        "name": "Get_Pressure_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.Pressure;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 180,
        "wires": [
            [
                "75a4f22317d61143"
            ]
        ]
    },
    {
        "id": "42fec20746cc78e0",
        "type": "ui_chart",
        "z": "7aa2c0dcb1ad3f61",
        "g": "61bb2e573a3113a1",
        "name": "",
        "group": "cc130bcc21f0f3e2",
        "order": 3,
        "width": 4,
        "height": 5,
        "label": "Humidity (%)",
        "chartType": "line",
        "legend": "false",
        "xformat": "mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "75a4f22317d61143",
        "type": "ui_chart",
        "z": "7aa2c0dcb1ad3f61",
        "g": "61bb2e573a3113a1",
        "name": "",
        "group": "cc130bcc21f0f3e2",
        "order": 5,
        "width": 4,
        "height": 5,
        "label": "Pressure (mbar)",
        "chartType": "line",
        "legend": "false",
        "xformat": "mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 820,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "a69c99f6840b1177",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "61bb2e573a3113a1",
        "name": "Get_Device_No",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.No;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 60,
        "wires": [
            [
                "e90d47681c175887"
            ]
        ]
    },
    {
        "id": "fb9f844027d67c51",
        "type": "ui_text",
        "z": "7aa2c0dcb1ad3f61",
        "g": "1658d0c3327d9add",
        "group": "9720ee367f97644d",
        "order": 1,
        "width": 5,
        "height": 1,
        "name": "",
        "label": "Device",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "25",
        "color": "#000000",
        "x": 2350,
        "y": 60,
        "wires": []
    },
    {
        "id": "6937aebbe287040f",
        "type": "json",
        "z": "7aa2c0dcb1ad3f61",
        "g": "1658d0c3327d9add",
        "name": "Json Parser",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1870,
        "y": 120,
        "wires": [
            [
                "5baebb76d8f8d196",
                "5e542be6f319b1be",
                "4b3e83c04b0bac1d",
                "40672adb337c5b31"
            ]
        ]
    },
    {
        "id": "09cb73efc427dfcf",
        "type": "serial in",
        "z": "7aa2c0dcb1ad3f61",
        "g": "1658d0c3327d9add",
        "name": "",
        "serial": "c08ba3c92d081914",
        "x": 1690,
        "y": 120,
        "wires": [
            [
                "6937aebbe287040f",
                "970f5ecce38e1e71",
                "7195fa562d9e2810",
                "13da39595b1e4c53"
            ]
        ]
    },
    {
        "id": "613aed9060f32902",
        "type": "ui_chart",
        "z": "7aa2c0dcb1ad3f61",
        "g": "1658d0c3327d9add",
        "name": "",
        "group": "9720ee367f97644d",
        "order": 4,
        "width": 4,
        "height": 5,
        "label": "Temperature (°C)",
        "chartType": "line",
        "legend": "false",
        "xformat": "mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 2390,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "5baebb76d8f8d196",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "1658d0c3327d9add",
        "name": "Get_Temp_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.Temp;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 100,
        "wires": [
            [
                "613aed9060f32902"
            ]
        ]
    },
    {
        "id": "5e542be6f319b1be",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "1658d0c3327d9add",
        "name": "Get_Humi_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.Humi;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 140,
        "wires": [
            [
                "a24215da35a5f476"
            ]
        ]
    },
    {
        "id": "4b3e83c04b0bac1d",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "1658d0c3327d9add",
        "name": "Get_Pressure_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.Pressure;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 180,
        "wires": [
            [
                "822955d49cb6871c"
            ]
        ]
    },
    {
        "id": "a24215da35a5f476",
        "type": "ui_chart",
        "z": "7aa2c0dcb1ad3f61",
        "g": "1658d0c3327d9add",
        "name": "",
        "group": "9720ee367f97644d",
        "order": 3,
        "width": 4,
        "height": 5,
        "label": "Humidity (%)",
        "chartType": "line",
        "legend": "false",
        "xformat": "mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 2370,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "822955d49cb6871c",
        "type": "ui_chart",
        "z": "7aa2c0dcb1ad3f61",
        "g": "1658d0c3327d9add",
        "name": "",
        "group": "9720ee367f97644d",
        "order": 5,
        "width": 4,
        "height": 5,
        "label": "Pressure (mbar)",
        "chartType": "line",
        "legend": "false",
        "xformat": "mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 2380,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "40672adb337c5b31",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "1658d0c3327d9add",
        "name": "Get_Device_No",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.No;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 60,
        "wires": [
            [
                "fb9f844027d67c51"
            ]
        ]
    },
    {
        "id": "d7d916558096ce06",
        "type": "ui_text",
        "z": "7aa2c0dcb1ad3f61",
        "g": "38c16815898d4182",
        "group": "c5c4dbf6ce5cea9f",
        "order": 1,
        "width": 5,
        "height": 1,
        "name": "",
        "label": "Device",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "25",
        "color": "#000000",
        "x": 2350,
        "y": 500,
        "wires": []
    },
    {
        "id": "dcc967c2c16f2085",
        "type": "json",
        "z": "7aa2c0dcb1ad3f61",
        "g": "38c16815898d4182",
        "name": "Json Parser",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1870,
        "y": 560,
        "wires": [
            [
                "e0e4a976cae22e3f",
                "5154052f81b895c4",
                "1212df10a202bcfa",
                "eb48ed3e45171951",
                "c67b5946a507bcaf",
                "843ada25e05d633e"
            ]
        ]
    },
    {
        "id": "6ffe13df81e818a6",
        "type": "serial in",
        "z": "7aa2c0dcb1ad3f61",
        "g": "38c16815898d4182",
        "name": "",
        "serial": "afcc5b962a35d645",
        "x": 1690,
        "y": 560,
        "wires": [
            [
                "dcc967c2c16f2085",
                "ea89ba92896414ca"
            ]
        ]
    },
    {
        "id": "1bb65fc1ec112cfa",
        "type": "ui_chart",
        "z": "7aa2c0dcb1ad3f61",
        "g": "38c16815898d4182",
        "name": "",
        "group": "c5c4dbf6ce5cea9f",
        "order": 4,
        "width": 4,
        "height": 5,
        "label": "Temperature (°C)",
        "chartType": "line",
        "legend": "false",
        "xformat": "mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 2390,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "e0e4a976cae22e3f",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "38c16815898d4182",
        "name": "Get_Temp_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.Temp;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 540,
        "wires": [
            [
                "1bb65fc1ec112cfa"
            ]
        ]
    },
    {
        "id": "5154052f81b895c4",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "38c16815898d4182",
        "name": "Get_Humi_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.Humi;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 580,
        "wires": [
            [
                "e5cf85b259e12f00"
            ]
        ]
    },
    {
        "id": "1212df10a202bcfa",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "38c16815898d4182",
        "name": "Get_Pressure_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.Pressure;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 620,
        "wires": [
            [
                "d84bba80c5e5a3d8"
            ]
        ]
    },
    {
        "id": "e5cf85b259e12f00",
        "type": "ui_chart",
        "z": "7aa2c0dcb1ad3f61",
        "g": "38c16815898d4182",
        "name": "",
        "group": "c5c4dbf6ce5cea9f",
        "order": 3,
        "width": 4,
        "height": 5,
        "label": "Humidity (%)",
        "chartType": "line",
        "legend": "false",
        "xformat": "mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 2370,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "d84bba80c5e5a3d8",
        "type": "ui_chart",
        "z": "7aa2c0dcb1ad3f61",
        "g": "38c16815898d4182",
        "name": "",
        "group": "c5c4dbf6ce5cea9f",
        "order": 5,
        "width": 4,
        "height": 5,
        "label": "Pressure (mbar)",
        "chartType": "line",
        "legend": "false",
        "xformat": "mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 2380,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "eb48ed3e45171951",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "38c16815898d4182",
        "name": "Get_Device_No",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.No;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 500,
        "wires": [
            [
                "d7d916558096ce06"
            ]
        ]
    },
    {
        "id": "cc3f182d6f603828",
        "type": "ui_text",
        "z": "7aa2c0dcb1ad3f61",
        "g": "032d0c29b8257962",
        "group": "d39f66a71d76a628",
        "order": 1,
        "width": 5,
        "height": 1,
        "name": "",
        "label": "Device",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "25",
        "color": "#000000",
        "x": 790,
        "y": 500,
        "wires": []
    },
    {
        "id": "42f882c5d8a13b88",
        "type": "json",
        "z": "7aa2c0dcb1ad3f61",
        "g": "032d0c29b8257962",
        "name": "Json Parser",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 310,
        "y": 560,
        "wires": [
            [
                "9bad8f9541ad0b03",
                "a5b13d6929ddb996",
                "fbd85d16497e7961",
                "beca1b69e307c7c5",
                "79688de27624ef92",
                "e323a0783f1660fd"
            ]
        ]
    },
    {
        "id": "3d80d76bb5295337",
        "type": "serial in",
        "z": "7aa2c0dcb1ad3f61",
        "g": "032d0c29b8257962",
        "name": "",
        "serial": "841e40e2941620a6",
        "x": 130,
        "y": 560,
        "wires": [
            [
                "42f882c5d8a13b88",
                "076b2ee2670c670f"
            ]
        ]
    },
    {
        "id": "e2bb901a46d20922",
        "type": "ui_chart",
        "z": "7aa2c0dcb1ad3f61",
        "g": "032d0c29b8257962",
        "name": "",
        "group": "d39f66a71d76a628",
        "order": 4,
        "width": 4,
        "height": 5,
        "label": "Temperature (°C)",
        "chartType": "line",
        "legend": "false",
        "xformat": "mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 830,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "9bad8f9541ad0b03",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "032d0c29b8257962",
        "name": "Get_Temp_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.Temp;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 540,
        "wires": [
            [
                "e2bb901a46d20922"
            ]
        ]
    },
    {
        "id": "a5b13d6929ddb996",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "032d0c29b8257962",
        "name": "Get_Humi_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.Humi;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 580,
        "wires": [
            [
                "548f00c1ab0fee7a"
            ]
        ]
    },
    {
        "id": "fbd85d16497e7961",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "032d0c29b8257962",
        "name": "Get_Pressure_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.Pressure;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 620,
        "wires": [
            [
                "49dbad6fe441ab7d"
            ]
        ]
    },
    {
        "id": "548f00c1ab0fee7a",
        "type": "ui_chart",
        "z": "7aa2c0dcb1ad3f61",
        "g": "032d0c29b8257962",
        "name": "",
        "group": "d39f66a71d76a628",
        "order": 3,
        "width": 4,
        "height": 5,
        "label": "Humidity (%)",
        "chartType": "line",
        "legend": "false",
        "xformat": "mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "49dbad6fe441ab7d",
        "type": "ui_chart",
        "z": "7aa2c0dcb1ad3f61",
        "g": "032d0c29b8257962",
        "name": "",
        "group": "d39f66a71d76a628",
        "order": 5,
        "width": 4,
        "height": 5,
        "label": "Pressure (mbar)",
        "chartType": "line",
        "legend": "false",
        "xformat": "mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 820,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "beca1b69e307c7c5",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "032d0c29b8257962",
        "name": "Get_Device_No",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.No;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 500,
        "wires": [
            [
                "cc3f182d6f603828"
            ]
        ]
    },
    {
        "id": "771b1c5b4018da09",
        "type": "ui_text",
        "z": "7aa2c0dcb1ad3f61",
        "g": "6359e7e814b343c2",
        "group": "3414d0e8ac778b41",
        "order": 1,
        "width": 5,
        "height": 1,
        "name": "",
        "label": "Device",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "25",
        "color": "#000000",
        "x": 790,
        "y": 900,
        "wires": []
    },
    {
        "id": "c4f4c6a2776d5228",
        "type": "json",
        "z": "7aa2c0dcb1ad3f61",
        "g": "6359e7e814b343c2",
        "name": "Json Parser",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 310,
        "y": 960,
        "wires": [
            [
                "c4c8aa854e28dcc1",
                "79fa68516b0f4d27",
                "c1b17963dc7f9d14",
                "249f9cc13143413e",
                "9c7a48c6264fc72e",
                "75e9fc6128df392a"
            ]
        ]
    },
    {
        "id": "11a518cac1d718f0",
        "type": "serial in",
        "z": "7aa2c0dcb1ad3f61",
        "g": "6359e7e814b343c2",
        "name": "",
        "serial": "e1dc8e9e1b2641b8",
        "x": 130,
        "y": 960,
        "wires": [
            [
                "c4f4c6a2776d5228",
                "47b887e9b634eefc"
            ]
        ]
    },
    {
        "id": "5d191b4d7d4c69a5",
        "type": "ui_chart",
        "z": "7aa2c0dcb1ad3f61",
        "g": "6359e7e814b343c2",
        "name": "",
        "group": "3414d0e8ac778b41",
        "order": 4,
        "width": 4,
        "height": 5,
        "label": "Temperature (°C)",
        "chartType": "line",
        "legend": "false",
        "xformat": "mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 830,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "c4c8aa854e28dcc1",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "6359e7e814b343c2",
        "name": "Get_Temp_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.Temp;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 940,
        "wires": [
            [
                "5d191b4d7d4c69a5"
            ]
        ]
    },
    {
        "id": "79fa68516b0f4d27",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "6359e7e814b343c2",
        "name": "Get_Humi_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.Humi;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 980,
        "wires": [
            [
                "bcdfed982f75b17c"
            ]
        ]
    },
    {
        "id": "c1b17963dc7f9d14",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "6359e7e814b343c2",
        "name": "Get_Pressure_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.Pressure;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1020,
        "wires": [
            [
                "83a3fe66b75eada1"
            ]
        ]
    },
    {
        "id": "bcdfed982f75b17c",
        "type": "ui_chart",
        "z": "7aa2c0dcb1ad3f61",
        "g": "6359e7e814b343c2",
        "name": "",
        "group": "3414d0e8ac778b41",
        "order": 3,
        "width": 4,
        "height": 5,
        "label": "Humidity (%)",
        "chartType": "line",
        "legend": "false",
        "xformat": "mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "83a3fe66b75eada1",
        "type": "ui_chart",
        "z": "7aa2c0dcb1ad3f61",
        "g": "6359e7e814b343c2",
        "name": "",
        "group": "3414d0e8ac778b41",
        "order": 5,
        "width": 4,
        "height": 5,
        "label": "Pressure (mbar)",
        "chartType": "line",
        "legend": "false",
        "xformat": "mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 820,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "249f9cc13143413e",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "6359e7e814b343c2",
        "name": "Get_Device_No",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.No;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 900,
        "wires": [
            [
                "771b1c5b4018da09"
            ]
        ]
    },
    {
        "id": "7496d6feb6223acb",
        "type": "ui_text",
        "z": "7aa2c0dcb1ad3f61",
        "g": "2c8518a9d41911a9",
        "group": "40cb7dafebe28b1d",
        "order": 1,
        "width": 5,
        "height": 1,
        "name": "",
        "label": "Device",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "25",
        "color": "#000000",
        "x": 2350,
        "y": 900,
        "wires": []
    },
    {
        "id": "638301bdfba880ba",
        "type": "json",
        "z": "7aa2c0dcb1ad3f61",
        "g": "2c8518a9d41911a9",
        "name": "Json Parser",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1870,
        "y": 960,
        "wires": [
            [
                "6f9f58be4cbf2a79",
                "2ab54647a38e4a58",
                "a39f4374fa01ef43",
                "6128c42a915b539c",
                "6c4f820e82a99933",
                "176bbc67a14e60b0"
            ]
        ]
    },
    {
        "id": "42efe51e361f0684",
        "type": "serial in",
        "z": "7aa2c0dcb1ad3f61",
        "g": "2c8518a9d41911a9",
        "name": "",
        "serial": "5dd942a404d91831",
        "x": 1690,
        "y": 960,
        "wires": [
            [
                "638301bdfba880ba",
                "20993bb1898a9726"
            ]
        ]
    },
    {
        "id": "00d1ae949defb27c",
        "type": "ui_chart",
        "z": "7aa2c0dcb1ad3f61",
        "g": "2c8518a9d41911a9",
        "name": "",
        "group": "40cb7dafebe28b1d",
        "order": 4,
        "width": 4,
        "height": 5,
        "label": "Temperature (°C)",
        "chartType": "line",
        "legend": "false",
        "xformat": "mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 2390,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "6f9f58be4cbf2a79",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "2c8518a9d41911a9",
        "name": "Get_Temp_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.Temp;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 940,
        "wires": [
            [
                "00d1ae949defb27c"
            ]
        ]
    },
    {
        "id": "2ab54647a38e4a58",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "2c8518a9d41911a9",
        "name": "Get_Humi_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.Humi;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 980,
        "wires": [
            [
                "19ac63afcc430990"
            ]
        ]
    },
    {
        "id": "a39f4374fa01ef43",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "2c8518a9d41911a9",
        "name": "Get_Pressure_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.Pressure;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 1020,
        "wires": [
            [
                "f50a0fc8d3d9b6a7"
            ]
        ]
    },
    {
        "id": "19ac63afcc430990",
        "type": "ui_chart",
        "z": "7aa2c0dcb1ad3f61",
        "g": "2c8518a9d41911a9",
        "name": "",
        "group": "40cb7dafebe28b1d",
        "order": 3,
        "width": 4,
        "height": 5,
        "label": "Humidity (%)",
        "chartType": "line",
        "legend": "false",
        "xformat": "mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 2370,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "f50a0fc8d3d9b6a7",
        "type": "ui_chart",
        "z": "7aa2c0dcb1ad3f61",
        "g": "2c8518a9d41911a9",
        "name": "",
        "group": "40cb7dafebe28b1d",
        "order": 5,
        "width": 4,
        "height": 5,
        "label": "Pressure (mbar)",
        "chartType": "line",
        "legend": "false",
        "xformat": "mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 2380,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "6128c42a915b539c",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "2c8518a9d41911a9",
        "name": "Get_Device_No",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.No;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 900,
        "wires": [
            [
                "7496d6feb6223acb"
            ]
        ]
    },
    {
        "id": "32e9264d8a223708",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "61bb2e573a3113a1",
        "name": "get time",
        "func": "var currentTime = new Date();\n\nvar formattedTime = currentTime.toLocaleString('en-US', {\n    day: '2-digit',\n    month: '2-digit',\n    year: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit',\n    hour12: false // Use 24-hour format\n});\n\nformattedTime = formattedTime.replace(/,/g, '');\n\nglobal.set(\"current_time\",formattedTime);\n\nmsg.payload = formattedTime;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 380,
        "wires": [
            [
                "d920536810b649a7",
                "bfd172813112d6b5",
                "1f188621b8cc7d39",
                "ca5d40bb65acc1a6",
                "f583e8fe2a2d560c",
                "e74a1ea6bf59de8d"
            ]
        ]
    },
    {
        "id": "d920536810b649a7",
        "type": "ui_text",
        "z": "7aa2c0dcb1ad3f61",
        "g": "61bb2e573a3113a1",
        "group": "cc130bcc21f0f3e2",
        "order": 2,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "Current Time : ",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 820,
        "y": 220,
        "wires": []
    },
    {
        "id": "bfd172813112d6b5",
        "type": "ui_text",
        "z": "7aa2c0dcb1ad3f61",
        "g": "032d0c29b8257962",
        "group": "d39f66a71d76a628",
        "order": 2,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "Current Time : ",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 820,
        "y": 660,
        "wires": []
    },
    {
        "id": "1f188621b8cc7d39",
        "type": "ui_text",
        "z": "7aa2c0dcb1ad3f61",
        "g": "6359e7e814b343c2",
        "group": "3414d0e8ac778b41",
        "order": 2,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "Current Time : ",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 820,
        "y": 1060,
        "wires": []
    },
    {
        "id": "ca5d40bb65acc1a6",
        "type": "ui_text",
        "z": "7aa2c0dcb1ad3f61",
        "g": "1658d0c3327d9add",
        "group": "9720ee367f97644d",
        "order": 2,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "Current Time : ",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 2380,
        "y": 220,
        "wires": []
    },
    {
        "id": "f583e8fe2a2d560c",
        "type": "ui_text",
        "z": "7aa2c0dcb1ad3f61",
        "g": "38c16815898d4182",
        "group": "c5c4dbf6ce5cea9f",
        "order": 2,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "Current Time : ",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 2380,
        "y": 660,
        "wires": []
    },
    {
        "id": "e74a1ea6bf59de8d",
        "type": "ui_text",
        "z": "7aa2c0dcb1ad3f61",
        "g": "2c8518a9d41911a9",
        "group": "40cb7dafebe28b1d",
        "order": 2,
        "width": 7,
        "height": 1,
        "name": "",
        "label": "Current Time : ",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 2380,
        "y": 1060,
        "wires": []
    },
    {
        "id": "9ad9d2c32993a0c8",
        "type": "inject",
        "z": "7aa2c0dcb1ad3f61",
        "g": "61bb2e573a3113a1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 380,
        "wires": [
            [
                "32e9264d8a223708"
            ]
        ]
    },
    {
        "id": "970f5ecce38e1e71",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "1658d0c3327d9add",
        "name": "convert form to reable string",
        "func": "const data = JSON.parse(msg.payload);\n\nconst currentTime = new Date();\nconst formattedTime = currentTime.toLocaleString('en-US', { hour12: false });\n\nconst logEntry = `${formattedTime}  Temp: ${data.Temp}  Humi: ${data.Humi}  Pressure: ${data.Pressure}\\n`;\n\nmsg.payload = logEntry;\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2080,
        "y": 260,
        "wires": [
            [
                "c719ce16f36be8b0"
            ]
        ]
    },
    {
        "id": "c719ce16f36be8b0",
        "type": "file",
        "z": "7aa2c0dcb1ad3f61",
        "g": "1658d0c3327d9add",
        "name": "",
        "filename": "/home/pi/datalogger/d2.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 2350,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "7b2ba296e3f5e3a5",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "61bb2e573a3113a1",
        "name": "convert form to reable string",
        "func": "const data = JSON.parse(msg.payload);\n\nconst currentTime = new Date();\nconst formattedTime = currentTime.toLocaleString('en-US', { hour12: false });\n\nconst logEntry = `${formattedTime}  Temp: ${data.Temp}  Humi: ${data.Humi}  Pressure: ${data.Pressure}\\n`;\n\nmsg.payload = logEntry;\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 260,
        "wires": [
            [
                "0704b819066de953"
            ]
        ]
    },
    {
        "id": "0704b819066de953",
        "type": "file",
        "z": "7aa2c0dcb1ad3f61",
        "g": "61bb2e573a3113a1",
        "name": "",
        "filename": "/home/pi/datalogger/d1.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 790,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "076b2ee2670c670f",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "032d0c29b8257962",
        "name": "convert form to reable string",
        "func": "const data = JSON.parse(msg.payload);\n\nconst currentTime = new Date();\nconst formattedTime = currentTime.toLocaleString('en-US', { hour12: false });\n\nconst logEntry = `${formattedTime}  Temp: ${data.Temp}  Humi: ${data.Humi}  Pressure: ${data.Pressure}\\n`;\n\nmsg.payload = logEntry;\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 700,
        "wires": [
            [
                "d2f882732b98008d"
            ]
        ]
    },
    {
        "id": "d2f882732b98008d",
        "type": "file",
        "z": "7aa2c0dcb1ad3f61",
        "g": "032d0c29b8257962",
        "name": "",
        "filename": "/home/pi/datalogger/d3.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 790,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "ea89ba92896414ca",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "38c16815898d4182",
        "name": "convert form to reable string",
        "func": "const data = JSON.parse(msg.payload);\n\nconst currentTime = new Date();\nconst formattedTime = currentTime.toLocaleString('en-US', { hour12: false });\n\nconst logEntry = `${formattedTime}  Temp: ${data.Temp}  Humi: ${data.Humi}  Pressure: ${data.Pressure}\\n`;\n\nmsg.payload = logEntry;\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2080,
        "y": 700,
        "wires": [
            [
                "cc105a293e642050"
            ]
        ]
    },
    {
        "id": "cc105a293e642050",
        "type": "file",
        "z": "7aa2c0dcb1ad3f61",
        "g": "38c16815898d4182",
        "name": "",
        "filename": "/home/pi/datalogger/d4.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 2350,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "47b887e9b634eefc",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "6359e7e814b343c2",
        "name": "convert form to reable string",
        "func": "const data = JSON.parse(msg.payload);\n\nconst currentTime = new Date();\nconst formattedTime = currentTime.toLocaleString('en-US', { hour12: false });\n\nconst logEntry = `${formattedTime}  Temp: ${data.Temp}  Humi: ${data.Humi}  Pressure: ${data.Pressure}\\n`;\n\nmsg.payload = logEntry;\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1100,
        "wires": [
            [
                "c4d54c6ad5a939c0"
            ]
        ]
    },
    {
        "id": "c4d54c6ad5a939c0",
        "type": "file",
        "z": "7aa2c0dcb1ad3f61",
        "g": "6359e7e814b343c2",
        "name": "",
        "filename": "/home/pi/datalogger/d5.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 790,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "20993bb1898a9726",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "2c8518a9d41911a9",
        "name": "convert form to reable string",
        "func": "const data = JSON.parse(msg.payload);\n\nconst currentTime = new Date();\nconst formattedTime = currentTime.toLocaleString('en-US', { hour12: false });\n\nconst logEntry = `${formattedTime}  Temp: ${data.Temp}  Humi: ${data.Humi}  Pressure: ${data.Pressure}\\n`;\n\nmsg.payload = logEntry;\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2080,
        "y": 1100,
        "wires": [
            [
                "ce65fe31d89fbbee"
            ]
        ]
    },
    {
        "id": "ce65fe31d89fbbee",
        "type": "file",
        "z": "7aa2c0dcb1ad3f61",
        "g": "2c8518a9d41911a9",
        "name": "",
        "filename": "/home/pi/datalogger/d6.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 2350,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "6ac28cb84fee6f2c",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "61bb2e573a3113a1",
        "name": "Get_Threshold_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.threshold;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 300,
        "wires": [
            [
                "b1e814136c92328a"
            ]
        ]
    },
    {
        "id": "691b5f161cc40ede",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "61bb2e573a3113a1",
        "name": "Get_Sample_rate_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.sample_rate;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 340,
        "wires": [
            [
                "1d60d719a4118c0c"
            ]
        ]
    },
    {
        "id": "b1e814136c92328a",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "61bb2e573a3113a1",
        "name": "compare threshold_value",
        "func": "var payload1 = parseInt(msg.payload); // Convert payload to number\nvar payload2 = global.get(\"threshold1\"); // Convert payload to number\n\n// Compare the two payloads\nvar result = payload1 === payload2;\n\n// Create a new message with the boolean result\nmsg.payload = (result === true ? \"1\" : \"0\") ;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 300,
        "wires": [
            [
                "a2a3e8a18c31da8e"
            ]
        ]
    },
    {
        "id": "a2a3e8a18c31da8e",
        "type": "switch",
        "z": "7aa2c0dcb1ad3f61",
        "g": "61bb2e573a3113a1",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1050,
        "y": 300,
        "wires": [
            [
                "f360311e4aefb8b7"
            ]
        ]
    },
    {
        "id": "f360311e4aefb8b7",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "61bb2e573a3113a1",
        "name": "send threshold_value",
        "func": "// Retrieve the threshold value from context\nvar inputNumber1 = global.get(\"threshold1\");\nvar inputNumber2 = global.get(\"sample_rate1\");\n\n// Check if the threshold value is not null or undefined\nif (inputNumber1 !== null && inputNumber1 !== undefined && inputNumber2 !== null && inputNumber2 !== undefined) {\n    // Create a JavaScript object with the threshold value\n    var jsonData = {\n        threshold: inputNumber1,\n        sample_rate: inputNumber2\n    };\n\n    // Convert the JavaScript object to a JSON string\n    var jsonString = JSON.stringify(jsonData);\n\n    // Assign the JSON string to the message payload\n    msg.payload = jsonString;\n\n    // Send the message to the next node\n    return msg;\n} else {\n    // If the threshold value is not found, log an error\n    node.error(\"Threshold value not found in context\");\n    return null; // Or handle the error accordingly\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 320,
        "wires": [
            [
                "48e68d59fbcb481d"
            ]
        ]
    },
    {
        "id": "48e68d59fbcb481d",
        "type": "serial out",
        "z": "7aa2c0dcb1ad3f61",
        "g": "61bb2e573a3113a1",
        "name": "",
        "serial": "14c3f49060a35744",
        "x": 1470,
        "y": 320,
        "wires": []
    },
    {
        "id": "1d60d719a4118c0c",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "61bb2e573a3113a1",
        "name": "compare Sample_rate_value",
        "func": "var payload1 = parseInt(msg.payload); // Convert payload to number\nvar payload2 = global.get(\"sample_rate1\"); // Convert payload to number\n\n// Compare the two payloads\nvar result = payload1 === payload2;\n\n// Create a new message with the boolean result\nmsg.payload = (result === true ? \"1\" : \"0\") ;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 340,
        "wires": [
            [
                "cff9848bcee3c960"
            ]
        ]
    },
    {
        "id": "cff9848bcee3c960",
        "type": "switch",
        "z": "7aa2c0dcb1ad3f61",
        "g": "61bb2e573a3113a1",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1050,
        "y": 340,
        "wires": [
            [
                "f360311e4aefb8b7"
            ]
        ]
    },
    {
        "id": "79688de27624ef92",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "032d0c29b8257962",
        "name": "Get_Threshold_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.threshold;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 740,
        "wires": [
            [
                "d73a96baf6447692"
            ]
        ]
    },
    {
        "id": "e323a0783f1660fd",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "032d0c29b8257962",
        "name": "Get_Sample_rate_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.sample_rate;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 780,
        "wires": [
            [
                "fd4a3c763ef1095e"
            ]
        ]
    },
    {
        "id": "d73a96baf6447692",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "032d0c29b8257962",
        "name": "compare threshold_value",
        "func": "var payload1 = parseInt(msg.payload); // Convert payload to number\nvar payload2 = global.get(\"threshold3\"); // Convert payload to number\n\n// Compare the two payloads\nvar result = payload1 === payload2;\n\n// Create a new message with the boolean result\nmsg.payload = (result === true ? \"1\" : \"0\") ;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 740,
        "wires": [
            [
                "4166e90ca4045632"
            ]
        ]
    },
    {
        "id": "4166e90ca4045632",
        "type": "switch",
        "z": "7aa2c0dcb1ad3f61",
        "g": "032d0c29b8257962",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1050,
        "y": 740,
        "wires": [
            [
                "69a9adccd24bb214"
            ]
        ]
    },
    {
        "id": "ab4cc799d75bb804",
        "type": "serial out",
        "z": "7aa2c0dcb1ad3f61",
        "g": "032d0c29b8257962",
        "name": "",
        "serial": "841e40e2941620a6",
        "x": 1450,
        "y": 760,
        "wires": []
    },
    {
        "id": "fd4a3c763ef1095e",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "032d0c29b8257962",
        "name": "compare Sample_rate_value",
        "func": "var payload1 = parseInt(msg.payload); // Convert payload to number\nvar payload2 = global.get(\"sample_rate3\"); // Convert payload to number\n\n// Compare the two payloads\nvar result = payload1 === payload2;\n\n// Create a new message with the boolean result\nmsg.payload = (result === true ? \"1\" : \"0\") ;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 780,
        "wires": [
            [
                "4cf50752ba267cd9"
            ]
        ]
    },
    {
        "id": "4cf50752ba267cd9",
        "type": "switch",
        "z": "7aa2c0dcb1ad3f61",
        "g": "032d0c29b8257962",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1050,
        "y": 780,
        "wires": [
            [
                "69a9adccd24bb214"
            ]
        ]
    },
    {
        "id": "7195fa562d9e2810",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "1658d0c3327d9add",
        "name": "Get_Threshold_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.threshold;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 300,
        "wires": [
            [
                "85e21daeecab9bc3"
            ]
        ]
    },
    {
        "id": "13da39595b1e4c53",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "1658d0c3327d9add",
        "name": "Get_Sample_rate_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.sample_rate;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2180,
        "y": 340,
        "wires": [
            [
                "1bc78b5c0b2f08da"
            ]
        ]
    },
    {
        "id": "85e21daeecab9bc3",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "1658d0c3327d9add",
        "name": "compare threshold_value",
        "func": "var payload1 = parseInt(msg.payload); // Convert payload to number\nvar payload2 = global.get(\"threshold2\"); // Convert payload to number\n\n// Compare the two payloads\nvar result = payload1 === payload2;\n\n// Create a new message with the boolean result\nmsg.payload = (result === true ? \"1\" : \"0\") ;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 300,
        "wires": [
            [
                "ed8dfa9454b4a998"
            ]
        ]
    },
    {
        "id": "ed8dfa9454b4a998",
        "type": "switch",
        "z": "7aa2c0dcb1ad3f61",
        "g": "1658d0c3327d9add",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2610,
        "y": 300,
        "wires": [
            [
                "6ee16ec8753f0d32"
            ]
        ]
    },
    {
        "id": "ef8c4ead4d1832cd",
        "type": "serial out",
        "z": "7aa2c0dcb1ad3f61",
        "g": "1658d0c3327d9add",
        "name": "",
        "serial": "c08ba3c92d081914",
        "x": 3010,
        "y": 320,
        "wires": []
    },
    {
        "id": "1bc78b5c0b2f08da",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "1658d0c3327d9add",
        "name": "compare Sample_rate_value",
        "func": "var payload1 = parseInt(msg.payload); // Convert payload to number\nvar payload2 = global.get(\"sample_rate2\"); // Convert payload to number\n\n// Compare the two payloads\nvar result = payload1 === payload2;\n\n// Create a new message with the boolean result\nmsg.payload = (result === true ? \"1\" : \"0\") ;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2420,
        "y": 340,
        "wires": [
            [
                "8f355250d0e42988"
            ]
        ]
    },
    {
        "id": "8f355250d0e42988",
        "type": "switch",
        "z": "7aa2c0dcb1ad3f61",
        "g": "1658d0c3327d9add",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2610,
        "y": 340,
        "wires": [
            [
                "6ee16ec8753f0d32"
            ]
        ]
    },
    {
        "id": "c67b5946a507bcaf",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "38c16815898d4182",
        "name": "Get_Threshold_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.threshold;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 740,
        "wires": [
            [
                "7418fabfd291093f"
            ]
        ]
    },
    {
        "id": "843ada25e05d633e",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "38c16815898d4182",
        "name": "Get_Sample_rate_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.sample_rate;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2180,
        "y": 780,
        "wires": [
            [
                "b38d5d95a94a4fde"
            ]
        ]
    },
    {
        "id": "7418fabfd291093f",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "38c16815898d4182",
        "name": "compare threshold_value",
        "func": "var payload1 = parseInt(msg.payload); // Convert payload to number\nvar payload2 = global.get(\"threshold4\"); // Convert payload to number\n\n// Compare the two payloads\nvar result = payload1 === payload2;\n\n// Create a new message with the boolean result\nmsg.payload = (result === true ? \"1\" : \"0\") ;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 740,
        "wires": [
            [
                "7f96a1c8749a3c29"
            ]
        ]
    },
    {
        "id": "7f96a1c8749a3c29",
        "type": "switch",
        "z": "7aa2c0dcb1ad3f61",
        "g": "38c16815898d4182",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2610,
        "y": 740,
        "wires": [
            [
                "bfe47362aec822cc"
            ]
        ]
    },
    {
        "id": "bee626716f66087c",
        "type": "serial out",
        "z": "7aa2c0dcb1ad3f61",
        "g": "38c16815898d4182",
        "name": "",
        "serial": "afcc5b962a35d645",
        "x": 3010,
        "y": 760,
        "wires": []
    },
    {
        "id": "b38d5d95a94a4fde",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "38c16815898d4182",
        "name": "compare Sample_rate_value",
        "func": "var payload1 = parseInt(msg.payload); // Convert payload to number\nvar payload2 = global.get(\"sample_rate4\"); // Convert payload to number\n\n// Compare the two payloads\nvar result = payload1 === payload2;\n\n// Create a new message with the boolean result\nmsg.payload = (result === true ? \"1\" : \"0\") ;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2420,
        "y": 780,
        "wires": [
            [
                "93077bb1625402b5"
            ]
        ]
    },
    {
        "id": "93077bb1625402b5",
        "type": "switch",
        "z": "7aa2c0dcb1ad3f61",
        "g": "38c16815898d4182",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2610,
        "y": 780,
        "wires": [
            [
                "bfe47362aec822cc"
            ]
        ]
    },
    {
        "id": "9c7a48c6264fc72e",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "6359e7e814b343c2",
        "name": "Get_Threshold_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.threshold;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1140,
        "wires": [
            [
                "ea9c05d71dc1dc5f"
            ]
        ]
    },
    {
        "id": "75e9fc6128df392a",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "6359e7e814b343c2",
        "name": "Get_Sample_rate_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.sample_rate;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1180,
        "wires": [
            [
                "0dbcf31b082748b0"
            ]
        ]
    },
    {
        "id": "ea9c05d71dc1dc5f",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "6359e7e814b343c2",
        "name": "compare threshold_value",
        "func": "var payload1 = parseInt(msg.payload); // Convert payload to number\nvar payload2 = global.get(\"threshold5\"); // Convert payload to number\n\n// Compare the two payloads\nvar result = payload1 === payload2;\n\n// Create a new message with the boolean result\nmsg.payload = (result === true ? \"1\" : \"0\") ;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1140,
        "wires": [
            [
                "67a3af7ef4737883"
            ]
        ]
    },
    {
        "id": "67a3af7ef4737883",
        "type": "switch",
        "z": "7aa2c0dcb1ad3f61",
        "g": "6359e7e814b343c2",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1050,
        "y": 1140,
        "wires": [
            [
                "1555e14053ce93f2"
            ]
        ]
    },
    {
        "id": "2bd7c6aff056c9d9",
        "type": "serial out",
        "z": "7aa2c0dcb1ad3f61",
        "g": "6359e7e814b343c2",
        "name": "",
        "serial": "e1dc8e9e1b2641b8",
        "x": 1450,
        "y": 1160,
        "wires": []
    },
    {
        "id": "0dbcf31b082748b0",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "6359e7e814b343c2",
        "name": "compare Sample_rate_value",
        "func": "var payload1 = parseInt(msg.payload); // Convert payload to number\nvar payload2 = global.get(\"sample_rate5\"); // Convert payload to number\n\n// Compare the two payloads\nvar result = payload1 === payload2;\n\n// Create a new message with the boolean result\nmsg.payload = (result === true ? \"1\" : \"0\") ;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 1180,
        "wires": [
            [
                "13874d18fbd62647"
            ]
        ]
    },
    {
        "id": "13874d18fbd62647",
        "type": "switch",
        "z": "7aa2c0dcb1ad3f61",
        "g": "6359e7e814b343c2",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1050,
        "y": 1180,
        "wires": [
            [
                "1555e14053ce93f2"
            ]
        ]
    },
    {
        "id": "6c4f820e82a99933",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "2c8518a9d41911a9",
        "name": "Get_Threshold_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.threshold;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 1140,
        "wires": [
            [
                "83ae0fbf0a24d5ca"
            ]
        ]
    },
    {
        "id": "176bbc67a14e60b0",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "2c8518a9d41911a9",
        "name": "Get_Sample_rate_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.sample_rate;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2180,
        "y": 1180,
        "wires": [
            [
                "e74de0ac8b9d27ab"
            ]
        ]
    },
    {
        "id": "83ae0fbf0a24d5ca",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "2c8518a9d41911a9",
        "name": "compare threshold_value",
        "func": "var payload1 = parseInt(msg.payload); // Convert payload to number\nvar payload2 = global.get(\"threshold1\"); // Convert payload to number\n\n// Compare the two payloads\nvar result = payload1 === payload2;\n\n// Create a new message with the boolean result\nmsg.payload = (result === true ? \"1\" : \"0\") ;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 1140,
        "wires": [
            [
                "53bdcef18e936c77"
            ]
        ]
    },
    {
        "id": "53bdcef18e936c77",
        "type": "switch",
        "z": "7aa2c0dcb1ad3f61",
        "g": "2c8518a9d41911a9",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2610,
        "y": 1140,
        "wires": [
            [
                "b3614cd518679cce"
            ]
        ]
    },
    {
        "id": "ea9bf853e99ed3af",
        "type": "serial out",
        "z": "7aa2c0dcb1ad3f61",
        "g": "2c8518a9d41911a9",
        "name": "",
        "serial": "5dd942a404d91831",
        "x": 3020,
        "y": 1160,
        "wires": []
    },
    {
        "id": "e74de0ac8b9d27ab",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "2c8518a9d41911a9",
        "name": "compare Sample_rate_value",
        "func": "var payload1 = parseInt(msg.payload); // Convert payload to number\nvar payload2 = global.get(\"sample_rate3\"); // Convert payload to number\n\n// Compare the two payloads\nvar result = payload1 === payload2;\n\n// Create a new message with the boolean result\nmsg.payload = (result === true ? \"1\" : \"0\") ;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2420,
        "y": 1180,
        "wires": [
            [
                "ed263269109609f6"
            ]
        ]
    },
    {
        "id": "ed263269109609f6",
        "type": "switch",
        "z": "7aa2c0dcb1ad3f61",
        "g": "2c8518a9d41911a9",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2610,
        "y": 1180,
        "wires": [
            [
                "b3614cd518679cce"
            ]
        ]
    },
    {
        "id": "69a9adccd24bb214",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "032d0c29b8257962",
        "name": "send threshold_value",
        "func": "// Retrieve the threshold value from context\nvar inputNumber1 = global.get(\"threshold3\");\nvar inputNumber2 = global.get(\"sample_rate3\");\n\n// Check if the threshold value is not null or undefined\nif (inputNumber1 !== null && inputNumber1 !== undefined && inputNumber2 !== null && inputNumber2 !== undefined) {\n    // Create a JavaScript object with the threshold value\n    var jsonData = {\n        threshold: inputNumber1,\n        sample_rate: inputNumber2\n    };\n\n    // Convert the JavaScript object to a JSON string\n    var jsonString = JSON.stringify(jsonData);\n\n    // Assign the JSON string to the message payload\n    msg.payload = jsonString;\n\n    // Send the message to the next node\n    return msg;\n} else {\n    // If the threshold value is not found, log an error\n    node.error(\"Threshold value not found in context\");\n    return null; // Or handle the error accordingly\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 760,
        "wires": [
            [
                "ab4cc799d75bb804"
            ]
        ]
    },
    {
        "id": "1555e14053ce93f2",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "6359e7e814b343c2",
        "name": "send threshold_value",
        "func": "// Retrieve the threshold value from context\nvar inputNumber1 = global.get(\"threshold5\");\nvar inputNumber2 = global.get(\"sample_rate5\");\n\n// Check if the threshold value is not null or undefined\nif (inputNumber1 !== null && inputNumber1 !== undefined && inputNumber2 !== null && inputNumber2 !== undefined) {\n    // Create a JavaScript object with the threshold value\n    var jsonData = {\n        threshold: inputNumber1,\n        sample_rate: inputNumber2\n    };\n\n    // Convert the JavaScript object to a JSON string\n    var jsonString = JSON.stringify(jsonData);\n\n    // Assign the JSON string to the message payload\n    msg.payload = jsonString;\n\n    // Send the message to the next node\n    return msg;\n} else {\n    // If the threshold value is not found, log an error\n    node.error(\"Threshold value not found in context\");\n    return null; // Or handle the error accordingly\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 1160,
        "wires": [
            [
                "2bd7c6aff056c9d9"
            ]
        ]
    },
    {
        "id": "6ee16ec8753f0d32",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "1658d0c3327d9add",
        "name": "send threshold_value",
        "func": "// Retrieve the threshold value from context\nvar inputNumber1 = global.get(\"threshold2\");\nvar inputNumber2 = global.get(\"sample_rate1\");\n\n// Check if the threshold value is not null or undefined\nif (inputNumber1 !== null && inputNumber1 !== undefined && inputNumber2 !== null && inputNumber2 !== undefined) {\n    // Create a JavaScript object with the threshold value\n    var jsonData = {\n        threshold: inputNumber1,\n        sample_rate: inputNumber2\n    };\n\n    // Convert the JavaScript object to a JSON string\n    var jsonString = JSON.stringify(jsonData);\n\n    // Assign the JSON string to the message payload\n    msg.payload = jsonString;\n\n    // Send the message to the next node\n    return msg;\n} else {\n    // If the threshold value is not found, log an error\n    node.error(\"Threshold value not found in context\");\n    return null; // Or handle the error accordingly\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2800,
        "y": 320,
        "wires": [
            [
                "ef8c4ead4d1832cd"
            ]
        ]
    },
    {
        "id": "bfe47362aec822cc",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "38c16815898d4182",
        "name": "send threshold_value",
        "func": "// Retrieve the threshold value from context\nvar inputNumber1 = global.get(\"threshold4\");\nvar inputNumber2 = global.get(\"sample_rate4\");\n\n// Check if the threshold value is not null or undefined\nif (inputNumber1 !== null && inputNumber1 !== undefined && inputNumber2 !== null && inputNumber2 !== undefined) {\n    // Create a JavaScript object with the threshold value\n    var jsonData = {\n        threshold: inputNumber1,\n        sample_rate: inputNumber2\n    };\n\n    // Convert the JavaScript object to a JSON string\n    var jsonString = JSON.stringify(jsonData);\n\n    // Assign the JSON string to the message payload\n    msg.payload = jsonString;\n\n    // Send the message to the next node\n    return msg;\n} else {\n    // If the threshold value is not found, log an error\n    node.error(\"Threshold value not found in context\");\n    return null; // Or handle the error accordingly\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2800,
        "y": 760,
        "wires": [
            [
                "bee626716f66087c"
            ]
        ]
    },
    {
        "id": "b3614cd518679cce",
        "type": "function",
        "z": "7aa2c0dcb1ad3f61",
        "g": "2c8518a9d41911a9",
        "name": "send threshold_value",
        "func": "// Retrieve the threshold value from context\nvar inputNumber1 = global.get(\"threshold6\");\nvar inputNumber2 = global.get(\"sample_rate6\");\n\n// Check if the threshold value is not null or undefined\nif (inputNumber1 !== null && inputNumber1 !== undefined && inputNumber2 !== null && inputNumber2 !== undefined) {\n    // Create a JavaScript object with the threshold value\n    var jsonData = {\n        threshold: inputNumber1,\n        sample_rate: inputNumber2\n    };\n\n    // Convert the JavaScript object to a JSON string\n    var jsonString = JSON.stringify(jsonData);\n\n    // Assign the JSON string to the message payload\n    msg.payload = jsonString;\n\n    // Send the message to the next node\n    return msg;\n} else {\n    // If the threshold value is not found, log an error\n    node.error(\"Threshold value not found in context\");\n    return null; // Or handle the error accordingly\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2800,
        "y": 1160,
        "wires": [
            [
                "ea9bf853e99ed3af"
            ]
        ]
    },
    {
        "id": "36a8dc43dc96f99d",
        "type": "file in",
        "z": "bd2114e151abaf4a",
        "name": "",
        "filename": "/home/pi/datalogger/d1.txt",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": true,
        "x": 310,
        "y": 40,
        "wires": [
            [
                "d58105f606c5746f"
            ]
        ]
    },
    {
        "id": "d2c9968d71970c60",
        "type": "ui_template",
        "z": "bd2114e151abaf4a",
        "group": "51e8082386a8a87a",
        "name": "display data",
        "order": 4,
        "width": 9,
        "height": 7,
        "format": "<div ng-bind-html=\"msg.payload\"></div>\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 850,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "d58105f606c5746f",
        "type": "function",
        "z": "bd2114e151abaf4a",
        "name": "read datalogger",
        "func": "if (typeof msg.payload === 'string') {\n    var modifiedPayload = msg.payload.replace(/\\n/g, '<br>');\n    msg.payload = modifiedPayload;\n} else {\n    node.error(\"Payload is not a string\");\n    return null; \n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 140,
        "wires": [
            [
                "d2c9968d71970c60"
            ]
        ]
    },
    {
        "id": "8fa0be4981933bfd",
        "type": "ui_button",
        "z": "bd2114e151abaf4a",
        "name": "",
        "group": "51e8082386a8a87a",
        "order": 2,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Device 1",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 100,
        "y": 40,
        "wires": [
            [
                "36a8dc43dc96f99d"
            ]
        ]
    },
    {
        "id": "9271300cae8e6831",
        "type": "ui_button",
        "z": "bd2114e151abaf4a",
        "name": "",
        "group": "51e8082386a8a87a",
        "order": 5,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Device 2",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 100,
        "y": 80,
        "wires": [
            [
                "b4918a43e3dec36a"
            ]
        ]
    },
    {
        "id": "b4918a43e3dec36a",
        "type": "file in",
        "z": "bd2114e151abaf4a",
        "name": "",
        "filename": "/home/pi/datalogger/d2.txt",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": true,
        "x": 310,
        "y": 80,
        "wires": [
            [
                "d58105f606c5746f"
            ]
        ]
    },
    {
        "id": "78cb2ecced38303e",
        "type": "ui_button",
        "z": "bd2114e151abaf4a",
        "name": "",
        "group": "51e8082386a8a87a",
        "order": 7,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Device 3",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 100,
        "y": 120,
        "wires": [
            [
                "0fad2eb4203941a9"
            ]
        ]
    },
    {
        "id": "0fad2eb4203941a9",
        "type": "file in",
        "z": "bd2114e151abaf4a",
        "name": "",
        "filename": "/home/pi/datalogger/d3.txt",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": true,
        "x": 310,
        "y": 120,
        "wires": [
            [
                "d58105f606c5746f"
            ]
        ]
    },
    {
        "id": "42d00c1ba2bcb95f",
        "type": "ui_button",
        "z": "bd2114e151abaf4a",
        "name": "",
        "group": "51e8082386a8a87a",
        "order": 9,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Device 4",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 100,
        "y": 160,
        "wires": [
            [
                "3724b75cdfcea5de"
            ]
        ]
    },
    {
        "id": "3724b75cdfcea5de",
        "type": "file in",
        "z": "bd2114e151abaf4a",
        "name": "",
        "filename": "/home/pi/datalogger/d4.txt",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": true,
        "x": 310,
        "y": 160,
        "wires": [
            [
                "d58105f606c5746f"
            ]
        ]
    },
    {
        "id": "63e6257d8bc521e7",
        "type": "ui_button",
        "z": "bd2114e151abaf4a",
        "name": "",
        "group": "51e8082386a8a87a",
        "order": 11,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Device 5",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 100,
        "y": 200,
        "wires": [
            [
                "07b5d9ea7b5c9bcf"
            ]
        ]
    },
    {
        "id": "07b5d9ea7b5c9bcf",
        "type": "file in",
        "z": "bd2114e151abaf4a",
        "name": "",
        "filename": "/home/pi/datalogger/d5.txt",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": true,
        "x": 310,
        "y": 200,
        "wires": [
            [
                "d58105f606c5746f"
            ]
        ]
    },
    {
        "id": "a5023456f660e4ae",
        "type": "ui_button",
        "z": "bd2114e151abaf4a",
        "name": "",
        "group": "51e8082386a8a87a",
        "order": 13,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Device 6",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 100,
        "y": 240,
        "wires": [
            [
                "cbd709ad30cdd64b"
            ]
        ]
    },
    {
        "id": "cbd709ad30cdd64b",
        "type": "file in",
        "z": "bd2114e151abaf4a",
        "name": "",
        "filename": "/home/pi/datalogger/d6.txt",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": true,
        "x": 310,
        "y": 240,
        "wires": [
            [
                "d58105f606c5746f"
            ]
        ]
    },
    {
        "id": "5cd70a0c5741ed88",
        "type": "ui_text",
        "z": "bd2114e151abaf4a",
        "group": "51e8082386a8a87a",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Sensor Data",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "25",
        "color": "#000000",
        "x": 850,
        "y": 180,
        "wires": []
    },
    {
        "id": "56ed11270fda3584",
        "type": "ui_dropdown",
        "z": "9998c34701ab1705",
        "name": "select device",
        "label": "",
        "tooltip": "",
        "place": "Device",
        "group": "83c5bb46763085ab",
        "order": 1,
        "width": 2,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Device 1",
                "value": "d1",
                "type": "str"
            },
            {
                "label": "Device 2",
                "value": "d2",
                "type": "str"
            },
            {
                "label": "Device 3",
                "value": "d3",
                "type": "str"
            },
            {
                "label": "Device 4",
                "value": "d4",
                "type": "str"
            },
            {
                "label": "Device 5",
                "value": "d5",
                "type": "str"
            },
            {
                "label": "Device 6",
                "value": "d6",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 410,
        "y": 320,
        "wires": [
            [
                "8aabb0e92182e5c0",
                "eed22c90f66a44c8"
            ]
        ]
    },
    {
        "id": "fe6ffed01623aeeb",
        "type": "ui_form",
        "z": "9998c34701ab1705",
        "name": "BOD",
        "label": "",
        "group": "614fce39359f50f5",
        "order": 1,
        "width": 13,
        "height": 1,
        "options": [
            {
                "label": "Name of sample",
                "value": "b",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Volume of sample (mL)",
                "value": "c",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Mass of KOH (g)",
                "value": "a",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Test duration (day)",
                "value": "g",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Pressure threshold (mbar) (-)",
                "value": "h",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Data frequency",
                "value": "i",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Note",
                "value": "k",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "b": "",
            "c": "",
            "a": "",
            "g": "",
            "h": "",
            "i": "",
            "k": ""
        },
        "payload": "",
        "submit": "Save",
        "cancel": "Cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 230,
        "y": 600,
        "wires": [
            [
                "fab1005f276e92e7",
                "66f459d3cbcfdbb5"
            ]
        ]
    },
    {
        "id": "80e34bc311c33873",
        "type": "ui_dropdown",
        "z": "9998c34701ab1705",
        "name": "",
        "label": "measurement type",
        "tooltip": "",
        "place": "Type of measurement",
        "group": "83c5bb46763085ab",
        "order": 2,
        "width": 7,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "BOD",
                "value": "o1",
                "type": "str"
            },
            {
                "label": "Compost",
                "value": "o2",
                "type": "str"
            },
            {
                "label": "BMP_1",
                "value": "o3",
                "type": "str"
            },
            {
                "label": "BMP_2",
                "value": "o4",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 430,
        "y": 220,
        "wires": [
            [
                "8d8922e69f125bc0",
                "feb75da48916fbbe"
            ]
        ]
    },
    {
        "id": "b44ae2c6e1bd97a9",
        "type": "change",
        "z": "9998c34701ab1705",
        "name": "hide all form",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"hide\":[\"Setting_Form1\",\"Setting_Form2\",\"Setting_Form3\",\"Setting_Form4\"],\"show\":[\"Setting_SettingView\"]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 990,
        "y": 80,
        "wires": [
            [
                "4933345d99d380e0",
                "b0a30be9ed033d52"
            ]
        ]
    },
    {
        "id": "5b925d25449a0623",
        "type": "switch",
        "z": "9998c34701ab1705",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "edit",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "view",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 810,
        "y": 60,
        "wires": [
            [
                "d03acb28580732af"
            ],
            [
                "b44ae2c6e1bd97a9"
            ]
        ]
    },
    {
        "id": "4933345d99d380e0",
        "type": "ui_ui_control",
        "z": "9998c34701ab1705",
        "name": "",
        "events": "all",
        "x": 1700,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "756fecca6cbfd4e0",
        "type": "ui_dropdown",
        "z": "9998c34701ab1705",
        "name": "setting view/edit",
        "label": "",
        "tooltip": "",
        "place": "Setting",
        "group": "83c5bb46763085ab",
        "order": 4,
        "width": 2,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Edit",
                "value": "edit",
                "type": "str"
            },
            {
                "label": "View",
                "value": "view",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 620,
        "y": 60,
        "wires": [
            [
                "5b925d25449a0623",
                "dcd87ec1a20658e8"
            ]
        ]
    },
    {
        "id": "c93ced48431af53d",
        "type": "inject",
        "z": "9998c34701ab1705",
        "name": "load default value",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 140,
        "wires": [
            [
                "80e34bc311c33873",
                "56ed11270fda3584",
                "549525f5ef79d1d7",
                "b44ae2c6e1bd97a9"
            ]
        ]
    },
    {
        "id": "23ef048886a07be4",
        "type": "switch",
        "z": "9998c34701ab1705",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "o1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "o2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "o3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "o4",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 1270,
        "y": 200,
        "wires": [
            [
                "f20ac79b8134743b"
            ],
            [
                "e2c5c9c244264a3d"
            ],
            [
                "9ef1e4a899831cb0"
            ],
            [
                "c808592e0764ac81"
            ]
        ]
    },
    {
        "id": "f20ac79b8134743b",
        "type": "change",
        "z": "9998c34701ab1705",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"show\":[\"Setting_Form1\"],\"hide\":[\"Setting_Form2\",\"Setting_Form3\",\"Setting_Form4\",\"Setting_SettingView\"]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1480,
        "y": 140,
        "wires": [
            [
                "4933345d99d380e0"
            ]
        ]
    },
    {
        "id": "e2c5c9c244264a3d",
        "type": "change",
        "z": "9998c34701ab1705",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"show\":[\"Setting_Form2\"],\"hide\":[\"Setting_Form1\",\"Setting_Form3\",\"Setting_Form4\",\"Setting_SettingView\"]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1480,
        "y": 180,
        "wires": [
            [
                "4933345d99d380e0"
            ]
        ]
    },
    {
        "id": "9ef1e4a899831cb0",
        "type": "change",
        "z": "9998c34701ab1705",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"show\":[\"Setting_Form3\"],\"hide\":[\"Setting_Form2\",\"Setting_Form1\",\"Setting_Form4\",\"Setting_SettingView\"]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1480,
        "y": 220,
        "wires": [
            [
                "4933345d99d380e0"
            ]
        ]
    },
    {
        "id": "c808592e0764ac81",
        "type": "change",
        "z": "9998c34701ab1705",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"show\":[\"Setting_Form4\"],\"hide\":[\"Setting_Form2\",\"Setting_Form3\",\"Setting_Form1\",\"Setting_SettingView\"]}}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1480,
        "y": 260,
        "wires": [
            [
                "4933345d99d380e0"
            ]
        ]
    },
    {
        "id": "cae0d4d56c0894fe",
        "type": "ui_form",
        "z": "9998c34701ab1705",
        "name": "Compost",
        "label": "",
        "group": "4bc2cfe0d22ec098",
        "order": 1,
        "width": 13,
        "height": 1,
        "options": [
            {
                "label": "Name of sample",
                "value": "b",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Volume of sample (mL)",
                "value": "c",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Mass of sample (g)",
                "value": "d",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Volume of KOH (mL)",
                "value": "e",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Concentration of KOH (mM)",
                "value": "f",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Test duration (day)",
                "value": "g",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Pressure threshold (mbar) (-)",
                "value": "h",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Data frequency",
                "value": "i",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Note",
                "value": "k",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "b": "",
            "c": "",
            "d": "",
            "e": "",
            "f": "",
            "g": "",
            "h": "",
            "i": "",
            "k": ""
        },
        "payload": "",
        "submit": "Save",
        "cancel": "Cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 240,
        "y": 660,
        "wires": [
            [
                "fab1005f276e92e7",
                "66f459d3cbcfdbb5"
            ]
        ]
    },
    {
        "id": "c51b37b1e9173fec",
        "type": "ui_form",
        "z": "9998c34701ab1705",
        "name": "BMP_1",
        "label": "",
        "group": "3c4edc4f79a8be8e",
        "order": 1,
        "width": 13,
        "height": 1,
        "options": [
            {
                "label": "Name of sample",
                "value": "b",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Volume of sample (mL)",
                "value": "c",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Test duration (day)",
                "value": "g",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Pressure threshold (mbar) (+) (BMP_1 > BMP_2)",
                "value": "h",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Data frequency",
                "value": "i",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Note",
                "value": "k",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "b": "",
            "c": "",
            "g": "",
            "h": "",
            "i": "",
            "k": ""
        },
        "payload": "",
        "submit": "Save",
        "cancel": "Cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 240,
        "y": 720,
        "wires": [
            [
                "fab1005f276e92e7",
                "66f459d3cbcfdbb5"
            ]
        ]
    },
    {
        "id": "aa5b65d6cb890a9c",
        "type": "ui_form",
        "z": "9998c34701ab1705",
        "name": "BMP_2",
        "label": "",
        "group": "16edb06c87718e1a",
        "order": 1,
        "width": 13,
        "height": 1,
        "options": [
            {
                "label": "Name of sample 4",
                "value": "b",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Volume of KOH (mL)",
                "value": "e",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Concentration of KOH (mM)",
                "value": "f",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Test duration (day)",
                "value": "g",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Pressure threshold (mbar) (+) (BMP_2 < BMP_1)",
                "value": "h",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Data frequency",
                "value": "i",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "Note",
                "value": "k",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "b": "",
            "e": "",
            "f": "",
            "g": "",
            "h": "",
            "i": "",
            "k": ""
        },
        "payload": "",
        "submit": "Save",
        "cancel": "Cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 240,
        "y": 780,
        "wires": [
            [
                "fab1005f276e92e7",
                "66f459d3cbcfdbb5"
            ]
        ]
    },
    {
        "id": "549525f5ef79d1d7",
        "type": "change",
        "z": "9998c34701ab1705",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "edit",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 60,
        "wires": [
            [
                "756fecca6cbfd4e0"
            ]
        ]
    },
    {
        "id": "8aabb0e92182e5c0",
        "type": "function",
        "z": "9998c34701ab1705",
        "name": "set current device",
        "func": "global.set(\"current_device\", msg.payload);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "8d8922e69f125bc0",
        "type": "function",
        "z": "9998c34701ab1705",
        "name": "set current measure type",
        "func": "global.set(\"current_measure_type\", msg.payload);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "d03acb28580732af",
        "type": "function",
        "z": "9998c34701ab1705",
        "name": "get current measure type",
        "func": "var currentMeasureType = global.get(\"current_measure_type\");\nvar msgToShowForm = {\n    payload: currentMeasureType\n};\n\nreturn msgToShowForm;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 40,
        "wires": [
            [
                "23ef048886a07be4"
            ]
        ]
    },
    {
        "id": "dcd87ec1a20658e8",
        "type": "function",
        "z": "9998c34701ab1705",
        "name": "set current measure type",
        "func": "global.set(\"current_view\", msg.payload);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "feb75da48916fbbe",
        "type": "function",
        "z": "9998c34701ab1705",
        "name": "show form in edit mode only",
        "func": "if(global.get(\"current_view\") == \"edit\"){\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 260,
        "wires": [
            [
                "23ef048886a07be4"
            ]
        ]
    },
    {
        "id": "99b62327702afe6e",
        "type": "file in",
        "z": "9998c34701ab1705",
        "name": "",
        "filename": "/home/pi/setting/d1_setting.txt",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1830,
        "y": 260,
        "wires": [
            [
                "a5f07a0715c197e0"
            ]
        ]
    },
    {
        "id": "a5f07a0715c197e0",
        "type": "function",
        "z": "9998c34701ab1705",
        "name": "read setting",
        "func": "if (typeof msg.payload === 'string') {\n    var modifiedPayload = msg.payload.replace(/\\n/g, '<br>');\n    msg.payload = modifiedPayload;\n} else {\n    node.error(\"Payload is not a string\");\n    return null; \n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 340,
        "wires": [
            [
                "c752d07807bdf877"
            ]
        ]
    },
    {
        "id": "c752d07807bdf877",
        "type": "ui_template",
        "z": "9998c34701ab1705",
        "group": "1582a2ec72c48d7b",
        "name": "display data",
        "order": 1,
        "width": 13,
        "height": 7,
        "format": "<div ng-bind-html=\"msg.payload\"></div>\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2330,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "aaf696142ee10ec8",
        "type": "file in",
        "z": "9998c34701ab1705",
        "name": "",
        "filename": "/home/pi/setting/d2_setting.txt",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1830,
        "y": 300,
        "wires": [
            [
                "a5f07a0715c197e0"
            ]
        ]
    },
    {
        "id": "96c0065813e19678",
        "type": "file in",
        "z": "9998c34701ab1705",
        "name": "",
        "filename": "/home/pi/setting/d3_setting.txt",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1830,
        "y": 340,
        "wires": [
            [
                "a5f07a0715c197e0"
            ]
        ]
    },
    {
        "id": "64270945067dee3d",
        "type": "file in",
        "z": "9998c34701ab1705",
        "name": "",
        "filename": "/home/pi/setting/d4_setting.txt",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1830,
        "y": 380,
        "wires": [
            [
                "a5f07a0715c197e0"
            ]
        ]
    },
    {
        "id": "3c875dd44c80e2e7",
        "type": "file in",
        "z": "9998c34701ab1705",
        "name": "",
        "filename": "/home/pi/setting/d5_setting.txt",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1830,
        "y": 420,
        "wires": [
            [
                "a5f07a0715c197e0"
            ]
        ]
    },
    {
        "id": "ec0e4e9997befa06",
        "type": "file in",
        "z": "9998c34701ab1705",
        "name": "",
        "filename": "/home/pi/setting/d6_setting.txt",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1830,
        "y": 460,
        "wires": [
            [
                "a5f07a0715c197e0"
            ]
        ]
    },
    {
        "id": "b0a30be9ed033d52",
        "type": "function",
        "z": "9998c34701ab1705",
        "name": "get current device",
        "func": "var currentDevice = global.get(\"current_device\");\nvar msg= {\n    payload: currentDevice\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 300,
        "wires": [
            [
                "b85a56841fdd5b6e"
            ]
        ]
    },
    {
        "id": "b85a56841fdd5b6e",
        "type": "switch",
        "z": "9998c34701ab1705",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "d1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "d2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "d3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "d4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "d5",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "d6",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 1510,
        "y": 360,
        "wires": [
            [
                "99b62327702afe6e"
            ],
            [
                "aaf696142ee10ec8"
            ],
            [
                "96c0065813e19678"
            ],
            [
                "64270945067dee3d"
            ],
            [
                "3c875dd44c80e2e7"
            ],
            [
                "ec0e4e9997befa06"
            ]
        ]
    },
    {
        "id": "eed22c90f66a44c8",
        "type": "function",
        "z": "9998c34701ab1705",
        "name": "show setting in viewmode only",
        "func": "if(global.get(\"current_view\") == \"view\"){\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 380,
        "wires": [
            [
                "b85a56841fdd5b6e"
            ]
        ]
    },
    {
        "id": "fab1005f276e92e7",
        "type": "function",
        "z": "9998c34701ab1705",
        "name": "convert form to reable string & store value",
        "func": "var jsonStr = msg.payload;\n\n// Mapping of JSON attributes to corresponding strings\nvar attributeMap = {\n    \"a\": \"Mass of KOH (g)\",\n    \"b\": \"Name of sample\",\n    \"c\": \"Volume of sample (mL)\",\n    \"d\": \"Mass of sample (g)\",\n    \"e\": \"Volume of KOH (mL)\",\n    \"f\": \"Concentration of KOH (mM)\",\n    \"g\": \"Test duration (day)\",\n    \"h\": \"Pressure threshold (mbar)\",\n    \"i\": \"Data frequency\",\n    \"k\": \"Note\"\n};\n\n// If the input is already a JSON object, parse it directly\nvar jsonObj = typeof jsonStr === 'string' ? JSON.parse(jsonStr) : jsonStr;\n\nvar pressureThreshold = jsonObj['h'];\nvar dataFrequency = jsonObj['i'];\n\n// Convert JavaScript object to formatted string with mapped attributes\nvar formattedString = Object.entries(jsonObj)\n    .map(([key, value]) => `${attributeMap[key]}: ${value}`)\n    .join(\"<br>\");\n\nglobal.set(\"threshold\",pressureThreshold);\n\nglobal.set(\"sample_rate\", dataFrequency);\n\nglobal.set(\"setting_msg\",formattedString);\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "e705743a5e236b07",
        "type": "file",
        "z": "9998c34701ab1705",
        "name": "",
        "filename": "/home/pi/setting/d1_setting.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1270,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "fa712fd8e0e318e3",
        "type": "file",
        "z": "9998c34701ab1705",
        "name": "",
        "filename": "/home/pi/setting/d2_setting.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1270,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "d75bc7b33d1d8785",
        "type": "file",
        "z": "9998c34701ab1705",
        "name": "",
        "filename": "/home/pi/setting/d3_setting.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1270,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "d024e533795957dc",
        "type": "file",
        "z": "9998c34701ab1705",
        "name": "",
        "filename": "/home/pi/setting/d4_setting.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1270,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "9f53c76484499128",
        "type": "file",
        "z": "9998c34701ab1705",
        "name": "",
        "filename": "/home/pi/setting/d5_setting.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1270,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "727e5b5b5c683f71",
        "type": "file",
        "z": "9998c34701ab1705",
        "name": "",
        "filename": "/home/pi/setting/d6_setting.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1270,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "a8a695185b8e60ba",
        "type": "switch",
        "z": "9998c34701ab1705",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "d1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "d2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "d3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "d4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "d5",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "d6",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 730,
        "y": 680,
        "wires": [
            [
                "dc730381818da3a7",
                "e8cd76f78e08090a"
            ],
            [
                "cf9051c6e0013370",
                "60b70245eb98db8c"
            ],
            [
                "48cf1d0496efc3f1",
                "6c2af7f61723ee45"
            ],
            [
                "2a85576b31e37c34",
                "08e088263de41575"
            ],
            [
                "bf2a4612c0a37027",
                "e66d245d5912310e"
            ],
            [
                "df4811b794913719",
                "b252ab365f62a0c1"
            ]
        ]
    },
    {
        "id": "66f459d3cbcfdbb5",
        "type": "function",
        "z": "9998c34701ab1705",
        "name": "get current device",
        "func": "var currentDevice = global.get(\"current_device\");\nvar msg= {\n    payload: currentDevice\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 680,
        "wires": [
            [
                "a8a695185b8e60ba"
            ]
        ]
    },
    {
        "id": "dc730381818da3a7",
        "type": "function",
        "z": "9998c34701ab1705",
        "name": "retrieve setting message",
        "func": "msg.payload = global.get(\"setting_msg\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 460,
        "wires": [
            [
                "e705743a5e236b07"
            ]
        ]
    },
    {
        "id": "cf9051c6e0013370",
        "type": "function",
        "z": "9998c34701ab1705",
        "name": "retrieve setting message",
        "func": "msg.payload = global.get(\"setting_msg\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 540,
        "wires": [
            [
                "fa712fd8e0e318e3"
            ]
        ]
    },
    {
        "id": "48cf1d0496efc3f1",
        "type": "function",
        "z": "9998c34701ab1705",
        "name": "retrieve setting message",
        "func": "msg.payload = global.get(\"setting_msg\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 620,
        "wires": [
            [
                "d75bc7b33d1d8785"
            ]
        ]
    },
    {
        "id": "2a85576b31e37c34",
        "type": "function",
        "z": "9998c34701ab1705",
        "name": "retrieve setting message",
        "func": "msg.payload = global.get(\"setting_msg\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 700,
        "wires": [
            [
                "d024e533795957dc"
            ]
        ]
    },
    {
        "id": "bf2a4612c0a37027",
        "type": "function",
        "z": "9998c34701ab1705",
        "name": "retrieve setting message",
        "func": "msg.payload = global.get(\"setting_msg\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 780,
        "wires": [
            [
                "9f53c76484499128"
            ]
        ]
    },
    {
        "id": "df4811b794913719",
        "type": "function",
        "z": "9998c34701ab1705",
        "name": "retrieve setting message",
        "func": "msg.payload = global.get(\"setting_msg\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 860,
        "wires": [
            [
                "727e5b5b5c683f71"
            ]
        ]
    },
    {
        "id": "40fb3f57ecc1b9b0",
        "type": "inject",
        "z": "9998c34701ab1705",
        "name": "Load threshold &sample rate value at startup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1230,
        "y": 980,
        "wires": [
            [
                "383f34409c0f84bb",
                "ee3a251b664a9c42",
                "9d3b0b750f712db6",
                "bee76916d90ea0d3",
                "b4c2245de61561d8",
                "c0d6e03546b14f3c"
            ]
        ]
    },
    {
        "id": "383f34409c0f84bb",
        "type": "file in",
        "z": "9998c34701ab1705",
        "name": "",
        "filename": "/home/pi/setting/d1.txt",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1600,
        "y": 880,
        "wires": [
            [
                "e74477e5b9f1a12b"
            ]
        ]
    },
    {
        "id": "ee3a251b664a9c42",
        "type": "file in",
        "z": "9998c34701ab1705",
        "name": "",
        "filename": "/home/pi/setting/d2.txt",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1600,
        "y": 920,
        "wires": [
            [
                "3de37457b9c1f9e6"
            ]
        ]
    },
    {
        "id": "9d3b0b750f712db6",
        "type": "file in",
        "z": "9998c34701ab1705",
        "name": "",
        "filename": "/home/pi/setting/d3.txt",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1600,
        "y": 960,
        "wires": [
            [
                "c1a9c9a8cf0aba10"
            ]
        ]
    },
    {
        "id": "bee76916d90ea0d3",
        "type": "file in",
        "z": "9998c34701ab1705",
        "name": "",
        "filename": "/home/pi/setting/d4.txt",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1600,
        "y": 1000,
        "wires": [
            [
                "13db93b277fc879b"
            ]
        ]
    },
    {
        "id": "b4c2245de61561d8",
        "type": "file in",
        "z": "9998c34701ab1705",
        "name": "",
        "filename": "/home/pi/setting/d5.txt",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1600,
        "y": 1040,
        "wires": [
            [
                "904a8f2ffb16c45f"
            ]
        ]
    },
    {
        "id": "c0d6e03546b14f3c",
        "type": "file in",
        "z": "9998c34701ab1705",
        "name": "",
        "filename": "/home/pi/setting/d6.txt",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1600,
        "y": 1080,
        "wires": [
            [
                "56b047d6d427fdfb"
            ]
        ]
    },
    {
        "id": "b6ca055b5faee70b",
        "type": "file",
        "z": "9998c34701ab1705",
        "name": "",
        "filename": "/home/pi/setting/d1.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1240,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "b39e728b68e6efb1",
        "type": "file",
        "z": "9998c34701ab1705",
        "name": "",
        "filename": "/home/pi/setting/d2.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1240,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "2bb130788b9bf1c1",
        "type": "file",
        "z": "9998c34701ab1705",
        "name": "",
        "filename": "/home/pi/setting/d3.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1240,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "73be6df267c1d8f9",
        "type": "file",
        "z": "9998c34701ab1705",
        "name": "",
        "filename": "/home/pi/setting/d4.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1240,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "37cbed6fe3660762",
        "type": "file",
        "z": "9998c34701ab1705",
        "name": "",
        "filename": "/home/pi/setting/d5.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1240,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "7bd9d7339872a7ba",
        "type": "file",
        "z": "9998c34701ab1705",
        "name": "",
        "filename": "/home/pi/setting/d6.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1240,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "e8cd76f78e08090a",
        "type": "function",
        "z": "9998c34701ab1705",
        "name": "retrieve threshold & sr",
        "func": "var threshold = global.get(\"threshold\");\nvar sample_rate = global.get(\"sample_rate\");\nmsg.payload = {\n    \"threshold\": threshold,\n    \"sample_rate\": sample_rate\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 500,
        "wires": [
            [
                "b6ca055b5faee70b"
            ]
        ]
    },
    {
        "id": "60b70245eb98db8c",
        "type": "function",
        "z": "9998c34701ab1705",
        "name": "retrieve threshold & sr",
        "func": "var threshold = global.get(\"threshold\");\nvar sample_rate = global.get(\"sample_rate\");\nmsg.payload = {\n    \"threshold\": threshold,\n    \"sample_rate\": sample_rate\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 580,
        "wires": [
            [
                "b39e728b68e6efb1"
            ]
        ]
    },
    {
        "id": "6c2af7f61723ee45",
        "type": "function",
        "z": "9998c34701ab1705",
        "name": "retrieve threshold & sr",
        "func": "var threshold = global.get(\"threshold\");\nvar sample_rate = global.get(\"sample_rate\");\nmsg.payload = {\n    \"threshold\": threshold,\n    \"sample_rate\": sample_rate\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 660,
        "wires": [
            [
                "2bb130788b9bf1c1"
            ]
        ]
    },
    {
        "id": "08e088263de41575",
        "type": "function",
        "z": "9998c34701ab1705",
        "name": "retrieve threshold & sr",
        "func": "var threshold = global.get(\"threshold\");\nvar sample_rate = global.get(\"sample_rate\");\nmsg.payload = {\n    \"threshold\": threshold,\n    \"sample_rate\": sample_rate\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 740,
        "wires": [
            [
                "73be6df267c1d8f9"
            ]
        ]
    },
    {
        "id": "e66d245d5912310e",
        "type": "function",
        "z": "9998c34701ab1705",
        "name": "retrieve threshold & sr",
        "func": "var threshold = global.get(\"threshold\");\nvar sample_rate = global.get(\"sample_rate\");\nmsg.payload = {\n    \"threshold\": threshold,\n    \"sample_rate\": sample_rate\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 820,
        "wires": [
            [
                "37cbed6fe3660762"
            ]
        ]
    },
    {
        "id": "b252ab365f62a0c1",
        "type": "function",
        "z": "9998c34701ab1705",
        "name": "retrieve threshold & sr",
        "func": "var threshold = global.get(\"threshold\");\nvar sample_rate = global.get(\"sample_rate\");\nmsg.payload = {\n    \"threshold\": threshold,\n    \"sample_rate\": sample_rate\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 900,
        "wires": [
            [
                "7bd9d7339872a7ba"
            ]
        ]
    },
    {
        "id": "e74477e5b9f1a12b",
        "type": "function",
        "z": "9998c34701ab1705",
        "name": "set threshold & sr",
        "func": "var jsonStr = msg.payload;\n\nvar parsedJson = JSON.parse(jsonStr);\n\nglobal.set('threshold1', parsedJson.threshold);\nglobal.set('sample_rate1', parsedJson.sample_rate);\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1910,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "3de37457b9c1f9e6",
        "type": "function",
        "z": "9998c34701ab1705",
        "name": "set threshold & sr",
        "func": "var jsonStr = msg.payload;\n\nvar parsedJson = JSON.parse(jsonStr);\n\nglobal.set('threshold2', parsedJson.threshold);\nglobal.set('sample_rate2', parsedJson.sample_rate);\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1910,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "c1a9c9a8cf0aba10",
        "type": "function",
        "z": "9998c34701ab1705",
        "name": "set threshold & sr",
        "func": "var jsonStr = msg.payload;\n\nvar parsedJson = JSON.parse(jsonStr);\n\nglobal.set('threshold3', parsedJson.threshold);\nglobal.set('sample_rate3', parsedJson.sample_rate);\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1910,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "13db93b277fc879b",
        "type": "function",
        "z": "9998c34701ab1705",
        "name": "set threshold & sr",
        "func": "var jsonStr = msg.payload;\n\nvar parsedJson = JSON.parse(jsonStr);\n\nglobal.set('threshold4', parsedJson.threshold);\nglobal.set('sample_rate4', parsedJson.sample_rate);\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1910,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "904a8f2ffb16c45f",
        "type": "function",
        "z": "9998c34701ab1705",
        "name": "set threshold & sr",
        "func": "var jsonStr = msg.payload;\n\nvar parsedJson = JSON.parse(jsonStr);\n\nglobal.set('threshold5', parsedJson.threshold);\nglobal.set('sample_rate5', parsedJson.sample_rate);\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1910,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "56b047d6d427fdfb",
        "type": "function",
        "z": "9998c34701ab1705",
        "name": "set threshold & sr",
        "func": "var jsonStr = msg.payload;\n\nvar parsedJson = JSON.parse(jsonStr);\n\nglobal.set('threshold6', parsedJson.threshold);\nglobal.set('sample_rate6', parsedJson.sample_rate);\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1910,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "36adae28da96fa18",
        "type": "debug",
        "z": "9998c34701ab1705",
        "name": "debug 23",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1780,
        "y": 760,
        "wires": []
    },
    {
        "id": "e2aa3c47f343ad52",
        "type": "ui_text",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "80131e16e49f1aed",
        "group": "cd30b0866923dca9",
        "order": 1,
        "width": 12,
        "height": 1,
        "name": "",
        "label": "Device",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "25",
        "color": "#000000",
        "x": 790,
        "y": 60,
        "wires": []
    },
    {
        "id": "29749f95fdbd5706",
        "type": "json",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "80131e16e49f1aed",
        "name": "Json Parser",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 310,
        "y": 120,
        "wires": [
            [
                "49ee9ea6b8c69d0d",
                "27336f972bbac707",
                "5267c52d57329083",
                "414c1534546247f7"
            ]
        ]
    },
    {
        "id": "0c4099c440f8cf33",
        "type": "serial in",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "80131e16e49f1aed",
        "name": "",
        "serial": "14c3f49060a35744",
        "x": 130,
        "y": 120,
        "wires": [
            [
                "29749f95fdbd5706"
            ]
        ]
    },
    {
        "id": "1ba3ccfb0c01a408",
        "type": "ui_chart",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "80131e16e49f1aed",
        "name": "",
        "group": "cd30b0866923dca9",
        "order": 3,
        "width": 4,
        "height": 5,
        "label": "Temperature (°C)",
        "chartType": "line",
        "legend": "false",
        "xformat": "mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 830,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "49ee9ea6b8c69d0d",
        "type": "function",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "80131e16e49f1aed",
        "name": "Get_Temp_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.Temp;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 100,
        "wires": [
            [
                "1ba3ccfb0c01a408"
            ]
        ]
    },
    {
        "id": "27336f972bbac707",
        "type": "function",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "80131e16e49f1aed",
        "name": "Get_Humi_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.Humi;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 140,
        "wires": [
            [
                "9948881a7644848d"
            ]
        ]
    },
    {
        "id": "5267c52d57329083",
        "type": "function",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "80131e16e49f1aed",
        "name": "Get_Pressure_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.Pressure;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 180,
        "wires": [
            [
                "67937dc1db4f1ea6"
            ]
        ]
    },
    {
        "id": "9948881a7644848d",
        "type": "ui_chart",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "80131e16e49f1aed",
        "name": "",
        "group": "cd30b0866923dca9",
        "order": 2,
        "width": 4,
        "height": 5,
        "label": "Humidity (%)",
        "chartType": "line",
        "legend": "false",
        "xformat": "mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "67937dc1db4f1ea6",
        "type": "ui_chart",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "80131e16e49f1aed",
        "name": "",
        "group": "cd30b0866923dca9",
        "order": 4,
        "width": 4,
        "height": 5,
        "label": "Pressure (mbar)",
        "chartType": "line",
        "legend": "false",
        "xformat": "mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 820,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "414c1534546247f7",
        "type": "function",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "80131e16e49f1aed",
        "name": "Get_Device_No",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.No;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 60,
        "wires": [
            [
                "e2aa3c47f343ad52"
            ]
        ]
    },
    {
        "id": "55554125af38d38e",
        "type": "ui_text",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "608a83b8a8dc43e9",
        "group": "27c2d5aa23760785",
        "order": 1,
        "width": 12,
        "height": 1,
        "name": "",
        "label": "Device",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "25",
        "color": "#000000",
        "x": 1730,
        "y": 60,
        "wires": []
    },
    {
        "id": "9a239a856f8cc5d8",
        "type": "json",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "608a83b8a8dc43e9",
        "name": "Json Parser",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1250,
        "y": 120,
        "wires": [
            [
                "f7a0a96acd45c631",
                "f8a6dd71743dacd9",
                "2096d9a25cc5d96f",
                "f373c398b49c1c99"
            ]
        ]
    },
    {
        "id": "75b71cf39204f828",
        "type": "serial in",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "608a83b8a8dc43e9",
        "name": "",
        "serial": "c08ba3c92d081914",
        "x": 1070,
        "y": 120,
        "wires": [
            [
                "9a239a856f8cc5d8"
            ]
        ]
    },
    {
        "id": "095869417e3e6c54",
        "type": "ui_chart",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "608a83b8a8dc43e9",
        "name": "",
        "group": "27c2d5aa23760785",
        "order": 3,
        "width": 4,
        "height": 5,
        "label": "Temperature (°C)",
        "chartType": "line",
        "legend": "false",
        "xformat": "mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1770,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "f7a0a96acd45c631",
        "type": "function",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "608a83b8a8dc43e9",
        "name": "Get_Temp_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.Temp;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 100,
        "wires": [
            [
                "095869417e3e6c54"
            ]
        ]
    },
    {
        "id": "f8a6dd71743dacd9",
        "type": "function",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "608a83b8a8dc43e9",
        "name": "Get_Humi_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.Humi;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 140,
        "wires": [
            [
                "8b96169a7b65b964"
            ]
        ]
    },
    {
        "id": "2096d9a25cc5d96f",
        "type": "function",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "608a83b8a8dc43e9",
        "name": "Get_Pressure_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.Pressure;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 180,
        "wires": [
            [
                "61788a2fb851f212"
            ]
        ]
    },
    {
        "id": "8b96169a7b65b964",
        "type": "ui_chart",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "608a83b8a8dc43e9",
        "name": "",
        "group": "27c2d5aa23760785",
        "order": 2,
        "width": 4,
        "height": 5,
        "label": "Humidity (%)",
        "chartType": "line",
        "legend": "false",
        "xformat": "mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1750,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "61788a2fb851f212",
        "type": "ui_chart",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "608a83b8a8dc43e9",
        "name": "",
        "group": "27c2d5aa23760785",
        "order": 4,
        "width": 4,
        "height": 5,
        "label": "Pressure (mbar)",
        "chartType": "line",
        "legend": "false",
        "xformat": "mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1760,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "f373c398b49c1c99",
        "type": "function",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "608a83b8a8dc43e9",
        "name": "Get_Device_No",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.No;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 60,
        "wires": [
            [
                "55554125af38d38e"
            ]
        ]
    },
    {
        "id": "c486f39425a6b43d",
        "type": "ui_text",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "c7b94306abd0ae1c",
        "group": "80b477da258d817c",
        "order": 1,
        "width": 12,
        "height": 1,
        "name": "",
        "label": "Device",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "25",
        "color": "#000000",
        "x": 1730,
        "y": 280,
        "wires": []
    },
    {
        "id": "e771e1fe2454ea0e",
        "type": "json",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "c7b94306abd0ae1c",
        "name": "Json Parser",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1250,
        "y": 340,
        "wires": [
            [
                "c469422b0c182879",
                "a66fcab8fd3732a7",
                "e357683968c612b2",
                "cb3dcbaffa31b88f"
            ]
        ]
    },
    {
        "id": "069fb13e997a3679",
        "type": "serial in",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "c7b94306abd0ae1c",
        "name": "",
        "serial": "afcc5b962a35d645",
        "x": 1070,
        "y": 340,
        "wires": [
            [
                "e771e1fe2454ea0e"
            ]
        ]
    },
    {
        "id": "6eec5bb87103e82d",
        "type": "ui_chart",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "c7b94306abd0ae1c",
        "name": "",
        "group": "80b477da258d817c",
        "order": 3,
        "width": 4,
        "height": 5,
        "label": "Temperature (°C)",
        "chartType": "line",
        "legend": "false",
        "xformat": "mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1770,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "c469422b0c182879",
        "type": "function",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "c7b94306abd0ae1c",
        "name": "Get_Temp_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.Temp;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 320,
        "wires": [
            [
                "6eec5bb87103e82d"
            ]
        ]
    },
    {
        "id": "a66fcab8fd3732a7",
        "type": "function",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "c7b94306abd0ae1c",
        "name": "Get_Humi_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.Humi;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 360,
        "wires": [
            [
                "f0471ba0ad9c3599"
            ]
        ]
    },
    {
        "id": "e357683968c612b2",
        "type": "function",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "c7b94306abd0ae1c",
        "name": "Get_Pressure_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.Pressure;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 400,
        "wires": [
            [
                "7a213ed9ed45a1ee"
            ]
        ]
    },
    {
        "id": "f0471ba0ad9c3599",
        "type": "ui_chart",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "c7b94306abd0ae1c",
        "name": "",
        "group": "80b477da258d817c",
        "order": 2,
        "width": 4,
        "height": 5,
        "label": "Humidity (%)",
        "chartType": "line",
        "legend": "false",
        "xformat": "mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1750,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "7a213ed9ed45a1ee",
        "type": "ui_chart",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "c7b94306abd0ae1c",
        "name": "",
        "group": "80b477da258d817c",
        "order": 4,
        "width": 4,
        "height": 5,
        "label": "Pressure (mbar)",
        "chartType": "line",
        "legend": "false",
        "xformat": "mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1760,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "cb3dcbaffa31b88f",
        "type": "function",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "c7b94306abd0ae1c",
        "name": "Get_Device_No",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.No;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 280,
        "wires": [
            [
                "c486f39425a6b43d"
            ]
        ]
    },
    {
        "id": "5c8ad4988ab8e117",
        "type": "ui_text",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "c92d375765b1b97a",
        "group": "a6415ec6b702cf97",
        "order": 1,
        "width": 12,
        "height": 1,
        "name": "",
        "label": "Device",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "25",
        "color": "#000000",
        "x": 790,
        "y": 280,
        "wires": []
    },
    {
        "id": "e40126db54187333",
        "type": "json",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "c92d375765b1b97a",
        "name": "Json Parser",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 310,
        "y": 340,
        "wires": [
            [
                "71483044774b3661",
                "2e2a67759b360eb0",
                "7c99b4dd180586b4",
                "7bebd35aa9cba926"
            ]
        ]
    },
    {
        "id": "1d895848229cc7c3",
        "type": "serial in",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "c92d375765b1b97a",
        "name": "",
        "serial": "841e40e2941620a6",
        "x": 130,
        "y": 340,
        "wires": [
            [
                "e40126db54187333"
            ]
        ]
    },
    {
        "id": "93491331a1b1a18b",
        "type": "ui_chart",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "c92d375765b1b97a",
        "name": "",
        "group": "a6415ec6b702cf97",
        "order": 3,
        "width": 4,
        "height": 5,
        "label": "Temperature (°C)",
        "chartType": "line",
        "legend": "false",
        "xformat": "mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 830,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "71483044774b3661",
        "type": "function",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "c92d375765b1b97a",
        "name": "Get_Temp_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.Temp;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 320,
        "wires": [
            [
                "93491331a1b1a18b"
            ]
        ]
    },
    {
        "id": "2e2a67759b360eb0",
        "type": "function",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "c92d375765b1b97a",
        "name": "Get_Humi_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.Humi;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 360,
        "wires": [
            [
                "b64788d3b68dea85"
            ]
        ]
    },
    {
        "id": "7c99b4dd180586b4",
        "type": "function",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "c92d375765b1b97a",
        "name": "Get_Pressure_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.Pressure;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 400,
        "wires": [
            [
                "99b07dc219c0bed8"
            ]
        ]
    },
    {
        "id": "b64788d3b68dea85",
        "type": "ui_chart",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "c92d375765b1b97a",
        "name": "",
        "group": "a6415ec6b702cf97",
        "order": 2,
        "width": 4,
        "height": 5,
        "label": "Humidity (%)",
        "chartType": "line",
        "legend": "false",
        "xformat": "mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "99b07dc219c0bed8",
        "type": "ui_chart",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "c92d375765b1b97a",
        "name": "",
        "group": "a6415ec6b702cf97",
        "order": 4,
        "width": 4,
        "height": 5,
        "label": "Pressure (mbar)",
        "chartType": "line",
        "legend": "false",
        "xformat": "mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 820,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "7bebd35aa9cba926",
        "type": "function",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "c92d375765b1b97a",
        "name": "Get_Device_No",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.No;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 280,
        "wires": [
            [
                "5c8ad4988ab8e117"
            ]
        ]
    },
    {
        "id": "8a4616e6abd82c59",
        "type": "ui_text",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "d930bf6892522eb6",
        "group": "d25661d6683a2457",
        "order": 1,
        "width": 12,
        "height": 1,
        "name": "",
        "label": "Device",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "25",
        "color": "#000000",
        "x": 790,
        "y": 500,
        "wires": []
    },
    {
        "id": "80cb4087d8132f9e",
        "type": "json",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "d930bf6892522eb6",
        "name": "Json Parser",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 310,
        "y": 560,
        "wires": [
            [
                "27368e7a35c7c5a2",
                "8a5f74ecd9c673c6",
                "d8a6ef56fc1a4c33",
                "fdc357afbd1f52c6"
            ]
        ]
    },
    {
        "id": "cd70302654556716",
        "type": "serial in",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "d930bf6892522eb6",
        "name": "",
        "serial": "e1dc8e9e1b2641b8",
        "x": 130,
        "y": 560,
        "wires": [
            [
                "80cb4087d8132f9e"
            ]
        ]
    },
    {
        "id": "5f9a9917a569378f",
        "type": "ui_chart",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "d930bf6892522eb6",
        "name": "",
        "group": "d25661d6683a2457",
        "order": 3,
        "width": 4,
        "height": 5,
        "label": "Temperature (°C)",
        "chartType": "line",
        "legend": "false",
        "xformat": "mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 830,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "27368e7a35c7c5a2",
        "type": "function",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "d930bf6892522eb6",
        "name": "Get_Temp_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.Temp;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 540,
        "wires": [
            [
                "5f9a9917a569378f"
            ]
        ]
    },
    {
        "id": "8a5f74ecd9c673c6",
        "type": "function",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "d930bf6892522eb6",
        "name": "Get_Humi_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.Humi;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 580,
        "wires": [
            [
                "78698af26b103ce4"
            ]
        ]
    },
    {
        "id": "d8a6ef56fc1a4c33",
        "type": "function",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "d930bf6892522eb6",
        "name": "Get_Pressure_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.Pressure;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 620,
        "wires": [
            [
                "4253069dd5ed4517"
            ]
        ]
    },
    {
        "id": "78698af26b103ce4",
        "type": "ui_chart",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "d930bf6892522eb6",
        "name": "",
        "group": "d25661d6683a2457",
        "order": 2,
        "width": 4,
        "height": 5,
        "label": "Humidity (%)",
        "chartType": "line",
        "legend": "false",
        "xformat": "mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 810,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "4253069dd5ed4517",
        "type": "ui_chart",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "d930bf6892522eb6",
        "name": "",
        "group": "d25661d6683a2457",
        "order": 4,
        "width": 4,
        "height": 5,
        "label": "Pressure (mbar)",
        "chartType": "line",
        "legend": "false",
        "xformat": "mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 820,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "fdc357afbd1f52c6",
        "type": "function",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "d930bf6892522eb6",
        "name": "Get_Device_No",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.No;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 500,
        "wires": [
            [
                "8a4616e6abd82c59"
            ]
        ]
    },
    {
        "id": "08bf7ea7a6e889cb",
        "type": "ui_text",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "09e3555552eb52bf",
        "group": "d6abc38f0c3236c2",
        "order": 1,
        "width": 12,
        "height": 1,
        "name": "",
        "label": "Device",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "25",
        "color": "#000000",
        "x": 1730,
        "y": 500,
        "wires": []
    },
    {
        "id": "ad86a873f6e1fc3e",
        "type": "json",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "09e3555552eb52bf",
        "name": "Json Parser",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1250,
        "y": 560,
        "wires": [
            [
                "29aa7fe2f1db6a02",
                "db96b5b5b5fd7c6d",
                "b944970daddb04f7",
                "8c6cbb5dd9faa7ae"
            ]
        ]
    },
    {
        "id": "29a83d5d7dd9df48",
        "type": "serial in",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "09e3555552eb52bf",
        "name": "",
        "serial": "5dd942a404d91831",
        "x": 1070,
        "y": 560,
        "wires": [
            [
                "ad86a873f6e1fc3e"
            ]
        ]
    },
    {
        "id": "2c04bc8671633c86",
        "type": "ui_chart",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "09e3555552eb52bf",
        "name": "",
        "group": "d6abc38f0c3236c2",
        "order": 3,
        "width": 4,
        "height": 5,
        "label": "Temperature (°C)",
        "chartType": "line",
        "legend": "false",
        "xformat": "mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1770,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "29aa7fe2f1db6a02",
        "type": "function",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "09e3555552eb52bf",
        "name": "Get_Temp_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.Temp;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 540,
        "wires": [
            [
                "2c04bc8671633c86"
            ]
        ]
    },
    {
        "id": "db96b5b5b5fd7c6d",
        "type": "function",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "09e3555552eb52bf",
        "name": "Get_Humi_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.Humi;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 580,
        "wires": [
            [
                "a94ae301ac39db3d"
            ]
        ]
    },
    {
        "id": "b944970daddb04f7",
        "type": "function",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "09e3555552eb52bf",
        "name": "Get_Pressure_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.Pressure;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 620,
        "wires": [
            [
                "8a82391651e02754"
            ]
        ]
    },
    {
        "id": "a94ae301ac39db3d",
        "type": "ui_chart",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "09e3555552eb52bf",
        "name": "",
        "group": "d6abc38f0c3236c2",
        "order": 2,
        "width": 4,
        "height": 5,
        "label": "Humidity (%)",
        "chartType": "line",
        "legend": "false",
        "xformat": "mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1750,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "8a82391651e02754",
        "type": "ui_chart",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "09e3555552eb52bf",
        "name": "",
        "group": "d6abc38f0c3236c2",
        "order": 4,
        "width": 4,
        "height": 5,
        "label": "Pressure (mbar)",
        "chartType": "line",
        "legend": "false",
        "xformat": "mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1760,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "8c6cbb5dd9faa7ae",
        "type": "function",
        "z": "5f30997072251ca7",
        "d": true,
        "g": "09e3555552eb52bf",
        "name": "Get_Device_No",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.No;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 500,
        "wires": [
            [
                "08bf7ea7a6e889cb"
            ]
        ]
    },
    {
        "id": "3de5191980ffd7da",
        "type": "ui_text",
        "z": "5f30997072251ca7",
        "d": true,
        "group": "8ef658be87907aa8",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Current Time :",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "27",
        "color": "#000000",
        "x": 740,
        "y": 740,
        "wires": []
    },
    {
        "id": "84f92d25a5ea10c7",
        "type": "function",
        "z": "5f30997072251ca7",
        "d": true,
        "name": "get time",
        "func": "var currentTime = new Date();\n\nvar formattedTime = currentTime.toLocaleString('en-US', {\n    day: '2-digit',\n    month: '2-digit',\n    year: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit',\n    hour12: false // Use 24-hour format\n});\n\nformattedTime = formattedTime.replace(/,/g, '');\n\n//global.set(\"current_time\",formattedTime);\n\nmsg.payload = formattedTime;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 740,
        "wires": [
            [
                "3de5191980ffd7da"
            ]
        ]
    },
    {
        "id": "a18e81e670b1a351",
        "type": "inject",
        "z": "5f30997072251ca7",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 410,
        "y": 740,
        "wires": [
            [
                "84f92d25a5ea10c7"
            ]
        ]
    },
    {
        "id": "2cf1bb8d36e466fa",
        "type": "ui_text",
        "z": "5f30997072251ca7",
        "group": "8ef658be87907aa8",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "About Us",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 480,
        "y": 820,
        "wires": []
    },
    {
        "id": "e65ae74fcb861380",
        "type": "ui_text",
        "z": "4a7e7418964c9f43",
        "d": true,
        "group": "d39f66a71d76a628",
        "order": 7,
        "width": 4,
        "height": 1,
        "name": "",
        "label": "Pressure Threshold :",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1080,
        "y": 380,
        "wires": []
    },
    {
        "id": "e17b0d7f52ae5014",
        "type": "function",
        "z": "4a7e7418964c9f43",
        "name": "Get_Threshold_Att",
        "func": "// Extract \"Temp\" attribute from the parsed JSON object\nvar jsonData = msg.payload; // Assuming msg.payload contains the parsed JSON object\nvar noValue = jsonData.Threshold;\n\n// Create a new message object to pass the extracted value\nvar newMsg = { payload: noValue };\n\n// Return the new message object\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 380,
        "wires": [
            [
                "7c8b59087461f497",
                "de38d3575f45ea39"
            ]
        ]
    },
    {
        "id": "de38d3575f45ea39",
        "type": "function",
        "z": "4a7e7418964c9f43",
        "name": "synchronisation indicator",
        "func": "if(parseFloat(msg.payload) !== global.get(\"threshold3\")){\n    msg.payload = msg.payload + \" [↻]\";\n    return msg\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 380,
        "wires": [
            [
                "e65ae74fcb861380"
            ]
        ]
    },
    {
        "id": "7c8b59087461f497",
        "type": "function",
        "z": "4a7e7418964c9f43",
        "name": "compare threshold_value",
        "func": "var payload1 = parseFloat(msg.payload); // Convert payload to number\nvar payload2 = global.get(\"threshold3\"); // Convert payload to number\n\n// Compare the two payloads\nvar result = payload1 === payload2;\n\n// Create a new message with the boolean result\nmsg.payload = (result === true ? \"1\" : \"0\") ;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 420,
        "wires": [
            [
                "13924e52ac0e6ac1"
            ]
        ]
    },
    {
        "id": "cff08e07e06e6dec",
        "type": "inject",
        "z": "4a7e7418964c9f43",
        "name": "Load threshold_value at startup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 460,
        "wires": [
            [
                "ca9ebdb26bd781f2"
            ]
        ]
    },
    {
        "id": "ca9ebdb26bd781f2",
        "type": "file in",
        "z": "4a7e7418964c9f43",
        "name": "read threshold_value from file",
        "filename": "/home/pi/log/threshold3_value.txt",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 470,
        "y": 460,
        "wires": [
            [
                "ed2b7613426fd1c8",
                "8ed1f6d7877fc4c5"
            ]
        ]
    },
    {
        "id": "8ed1f6d7877fc4c5",
        "type": "ui_slider",
        "z": "4a7e7418964c9f43",
        "d": true,
        "name": "set threshold_value",
        "label": "Set",
        "tooltip": "",
        "group": "d39f66a71d76a628",
        "order": 8,
        "width": 8,
        "height": 1,
        "passthru": true,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "min": "-160",
        "max": "160",
        "step": 1,
        "className": "",
        "x": 790,
        "y": 520,
        "wires": [
            [
                "bf59f7f91276f75c",
                "52281c14a376ab80"
            ]
        ]
    },
    {
        "id": "ed2b7613426fd1c8",
        "type": "function",
        "z": "4a7e7418964c9f43",
        "name": "store threshold_value",
        "func": "global.set(\"threshold3\",parseFloat(msg.payload));",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "13924e52ac0e6ac1",
        "type": "switch",
        "z": "4a7e7418964c9f43",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1010,
        "y": 420,
        "wires": [
            [
                "b7fd0ecb5adfbec2"
            ]
        ]
    },
    {
        "id": "b7fd0ecb5adfbec2",
        "type": "function",
        "z": "4a7e7418964c9f43",
        "name": "send threshold_value",
        "func": "// Retrieve the threshold value from context\nvar inputNumber = global.get(\"threshold3\");\n\n// Check if the threshold value is not null or undefined\nif (inputNumber !== null && inputNumber !== undefined) {\n    // Create a JavaScript object with the threshold value\n    var jsonData = {\n        threshold: inputNumber\n    };\n\n    // Convert the JavaScript object to a JSON string\n    var jsonString = JSON.stringify(jsonData);\n\n    // Assign the JSON string to the message payload\n    msg.payload = jsonString;\n\n    // Send the message to the next node\n    return msg;\n} else {\n    // If the threshold value is not found, log an error\n    node.error(\"Threshold value not found in context\");\n    return null; // Or handle the error accordingly\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 420,
        "wires": [
            [
                "d8381c02e8de358f",
                "32000d3854258f9e"
            ]
        ]
    },
    {
        "id": "55c8505f946f2f1e",
        "type": "json",
        "z": "4a7e7418964c9f43",
        "name": "Json Parser",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 270,
        "y": 280,
        "wires": [
            [
                "e17b0d7f52ae5014"
            ]
        ]
    },
    {
        "id": "5d28413183221330",
        "type": "serial in",
        "z": "4a7e7418964c9f43",
        "name": "",
        "serial": "841e40e2941620a6",
        "x": 90,
        "y": 280,
        "wires": [
            [
                "55c8505f946f2f1e"
            ]
        ]
    },
    {
        "id": "bf59f7f91276f75c",
        "type": "file",
        "z": "4a7e7418964c9f43",
        "name": "write threshold_value",
        "filename": "/home/pi/log/threshold3_value.txt",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1120,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "52281c14a376ab80",
        "type": "function",
        "z": "4a7e7418964c9f43",
        "name": "store threshold_value",
        "func": "global.set(\"threshold3\",parseFloat(msg.payload));",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "32000d3854258f9e",
        "type": "debug",
        "z": "4a7e7418964c9f43",
        "name": "debug 22",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1360,
        "y": 520,
        "wires": []
    },
    {
        "id": "d8381c02e8de358f",
        "type": "serial out",
        "z": "4a7e7418964c9f43",
        "name": "",
        "serial": "14c3f49060a35744",
        "x": 1410,
        "y": 420,
        "wires": []
    }
]